
Bai4_RealTimeClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000710c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fc4  08007294  08007294  00017294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a258  0800a258  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800a258  0800a258  0001a258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a260  0800a260  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a260  0800a260  0001a260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a264  0800a264  0001a264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800a268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000270  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000284  20000284  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b924  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ac5  00000000  00000000  0003b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  0003f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001390  00000000  00000000  00040940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242cf  00000000  00000000  00041cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c13b  00000000  00000000  00065f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d30cc  00000000  00000000  000820da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001551a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056ec  00000000  00000000  001551fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800727c 	.word	0x0800727c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800727c 	.word	0x0800727c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2108      	movs	r1, #8
 80004c8:	4802      	ldr	r0, [pc, #8]	; (80004d4 <button_init+0x14>)
 80004ca:	f002 fe29 	bl	8003120 <HAL_GPIO_WritePin>
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40020c00 	.word	0x40020c00

080004d8 <button_Scan>:

void button_Scan(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2108      	movs	r1, #8
 80004e2:	482f      	ldr	r0, [pc, #188]	; (80005a0 <button_Scan+0xc8>)
 80004e4:	f002 fe1c 	bl	8003120 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2108      	movs	r1, #8
 80004ec:	482c      	ldr	r0, [pc, #176]	; (80005a0 <button_Scan+0xc8>)
 80004ee:	f002 fe17 	bl	8003120 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004f2:	230a      	movs	r3, #10
 80004f4:	2202      	movs	r2, #2
 80004f6:	492b      	ldr	r1, [pc, #172]	; (80005a4 <button_Scan+0xcc>)
 80004f8:	482b      	ldr	r0, [pc, #172]	; (80005a8 <button_Scan+0xd0>)
 80004fa:	f004 fd52 	bl	8004fa2 <HAL_SPI_Receive>
	  int button_index = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000506:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000508:	2300      	movs	r3, #0
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	e03f      	b.n	800058e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	db06      	blt.n	8000522 <button_Scan+0x4a>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b03      	cmp	r3, #3
 8000518:	dc03      	bgt.n	8000522 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3304      	adds	r3, #4
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e018      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b03      	cmp	r3, #3
 8000526:	dd07      	ble.n	8000538 <button_Scan+0x60>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b07      	cmp	r3, #7
 800052c:	dc04      	bgt.n	8000538 <button_Scan+0x60>
			  button_index = 7 - i;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f1c3 0307 	rsb	r3, r3, #7
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	e00d      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dd06      	ble.n	800054c <button_Scan+0x74>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b0b      	cmp	r3, #11
 8000542:	dc03      	bgt.n	800054c <button_Scan+0x74>
			  button_index = i + 4;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3304      	adds	r3, #4
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e003      	b.n	8000554 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f1c3 0317 	rsb	r3, r3, #23
 8000552:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <button_Scan+0xcc>)
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	897b      	ldrh	r3, [r7, #10]
 800055a:	4013      	ands	r3, r2
 800055c:	b29b      	uxth	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d005      	beq.n	800056e <button_Scan+0x96>
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <button_Scan+0xd4>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2100      	movs	r1, #0
 8000568:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800056c:	e009      	b.n	8000582 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800056e:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <button_Scan+0xd4>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000576:	3301      	adds	r3, #1
 8000578:	b299      	uxth	r1, r3
 800057a:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <button_Scan+0xd4>)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000582:	897b      	ldrh	r3, [r7, #10]
 8000584:	085b      	lsrs	r3, r3, #1
 8000586:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	ddbc      	ble.n	800050e <button_Scan+0x36>
	  }
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	20000030 	.word	0x20000030
 80005a8:	2000019c 	.word	0x2000019c
 80005ac:	2000008c 	.word	0x2000008c

080005b0 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80005b4:	201e      	movs	r0, #30
 80005b6:	f002 f98f 	bl	80028d8 <DEC2BCD>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <ds3231_init+0x80>)
 80005c0:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005c2:	2016      	movs	r0, #22
 80005c4:	f002 f988 	bl	80028d8 <DEC2BCD>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <ds3231_init+0x80>)
 80005ce:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005d0:	2015      	movs	r0, #21
 80005d2:	f002 f981 	bl	80028d8 <DEC2BCD>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <ds3231_init+0x80>)
 80005dc:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005de:	2006      	movs	r0, #6
 80005e0:	f002 f97a 	bl	80028d8 <DEC2BCD>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <ds3231_init+0x80>)
 80005ea:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80005ec:	200f      	movs	r0, #15
 80005ee:	f002 f973 	bl	80028d8 <DEC2BCD>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <ds3231_init+0x80>)
 80005f8:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80005fa:	2009      	movs	r0, #9
 80005fc:	f002 f96c 	bl	80028d8 <DEC2BCD>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <ds3231_init+0x80>)
 8000606:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000608:	2017      	movs	r0, #23
 800060a:	f002 f965 	bl	80028d8 <DEC2BCD>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <ds3231_init+0x80>)
 8000614:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000616:	2332      	movs	r3, #50	; 0x32
 8000618:	2203      	movs	r2, #3
 800061a:	21d0      	movs	r1, #208	; 0xd0
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <ds3231_init+0x84>)
 800061e:	f003 f9fd 	bl	8003a1c <HAL_I2C_IsDeviceReady>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d000      	beq.n	800062a <ds3231_init+0x7a>
		while(1);
 8000628:	e7fe      	b.n	8000628 <ds3231_init+0x78>
	};
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200000b4 	.word	0x200000b4
 8000634:	2000010c 	.word	0x2000010c

08000638 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af04      	add	r7, sp, #16
 800063e:	4603      	mov	r3, r0
 8000640:	460a      	mov	r2, r1
 8000642:	71fb      	strb	r3, [r7, #7]
 8000644:	4613      	mov	r3, r2
 8000646:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f002 f944 	bl	80028d8 <DEC2BCD>
 8000650:	4603      	mov	r3, r0
 8000652:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	b29a      	uxth	r2, r3
 8000658:	230a      	movs	r3, #10
 800065a:	9302      	str	r3, [sp, #8]
 800065c:	2301      	movs	r3, #1
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	f107 030f 	add.w	r3, r7, #15
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	21d0      	movs	r1, #208	; 0xd0
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <ds3231_Write+0x40>)
 800066c:	f002 feb6 	bl	80033dc <HAL_I2C_Mem_Write>
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000010c 	.word	0x2000010c

0800067c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000682:	230a      	movs	r3, #10
 8000684:	9302      	str	r3, [sp, #8]
 8000686:	2307      	movs	r3, #7
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <ds3231_ReadTime+0xa4>)
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2301      	movs	r3, #1
 8000690:	2200      	movs	r2, #0
 8000692:	21d0      	movs	r1, #208	; 0xd0
 8000694:	4823      	ldr	r0, [pc, #140]	; (8000724 <ds3231_ReadTime+0xa8>)
 8000696:	f002 ff9b 	bl	80035d0 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <ds3231_ReadTime+0xa4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 f900 	bl	80028a4 <BCD2DEC>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <ds3231_ReadTime+0xac>)
 80006aa:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006ae:	785b      	ldrb	r3, [r3, #1]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 f8f7 	bl	80028a4 <BCD2DEC>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <ds3231_ReadTime+0xb0>)
 80006bc:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 f8ee 	bl	80028a4 <BCD2DEC>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <ds3231_ReadTime+0xb4>)
 80006ce:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006d2:	78db      	ldrb	r3, [r3, #3]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 f8e5 	bl	80028a4 <BCD2DEC>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <ds3231_ReadTime+0xb8>)
 80006e0:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 f8dc 	bl	80028a4 <BCD2DEC>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <ds3231_ReadTime+0xbc>)
 80006f2:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <ds3231_ReadTime+0xa4>)
 80006f6:	795b      	ldrb	r3, [r3, #5]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 f8d3 	bl	80028a4 <BCD2DEC>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <ds3231_ReadTime+0xc0>)
 8000704:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <ds3231_ReadTime+0xa4>)
 8000708:	799b      	ldrb	r3, [r3, #6]
 800070a:	4618      	mov	r0, r3
 800070c:	f002 f8ca 	bl	80028a4 <BCD2DEC>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <ds3231_ReadTime+0xc4>)
 8000716:	701a      	strb	r2, [r3, #0]
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000b4 	.word	0x200000b4
 8000724:	2000010c 	.word	0x2000010c
 8000728:	200000ac 	.word	0x200000ac
 800072c:	200000ae 	.word	0x200000ae
 8000730:	200000b1 	.word	0x200000b1
 8000734:	200000b0 	.word	0x200000b0
 8000738:	200000af 	.word	0x200000af
 800073c:	200000b2 	.word	0x200000b2
 8000740:	200000ad 	.word	0x200000ad

08000744 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08e      	sub	sp, #56	; 0x38
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
 800076c:	615a      	str	r2, [r3, #20]
 800076e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000770:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <MX_FSMC_Init+0xec>)
 8000772:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000776:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000778:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_FSMC_Init+0xec>)
 800077a:	4a2e      	ldr	r2, [pc, #184]	; (8000834 <MX_FSMC_Init+0xf0>)
 800077c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_FSMC_Init+0xec>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000784:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_FSMC_Init+0xec>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <MX_FSMC_Init+0xec>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <MX_FSMC_Init+0xec>)
 8000792:	2210      	movs	r2, #16
 8000794:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_FSMC_Init+0xec>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <MX_FSMC_Init+0xec>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_FSMC_Init+0xec>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_FSMC_Init+0xec>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_FSMC_Init+0xec>)
 80007b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_FSMC_Init+0xec>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_FSMC_Init+0xec>)
 80007be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_FSMC_Init+0xec>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_FSMC_Init+0xec>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_FSMC_Init+0xec>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007d6:	230f      	movs	r3, #15
 80007d8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007da:	230f      	movs	r3, #15
 80007dc:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007de:	233c      	movs	r3, #60	; 0x3c
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80007e6:	2310      	movs	r3, #16
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80007ea:	2311      	movs	r3, #17
 80007ec:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007ee:	2300      	movs	r3, #0
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007f2:	2308      	movs	r3, #8
 80007f4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80007f6:	230f      	movs	r3, #15
 80007f8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80007fa:	2309      	movs	r3, #9
 80007fc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000802:	2310      	movs	r3, #16
 8000804:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000806:	2311      	movs	r3, #17
 8000808:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800080e:	463a      	mov	r2, r7
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_FSMC_Init+0xec>)
 8000818:	f004 ffa6 	bl	8005768 <HAL_SRAM_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000822:	f001 fddb 	bl	80023dc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000826:	bf00      	nop
 8000828:	3738      	adds	r7, #56	; 0x38
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000bc 	.word	0x200000bc
 8000834:	a0000104 	.word	0xa0000104

08000838 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <HAL_FSMC_MspInit+0x88>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d131      	bne.n	80008b8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <HAL_FSMC_MspInit+0x88>)
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <HAL_FSMC_MspInit+0x8c>)
 8000860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <HAL_FSMC_MspInit+0x8c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6393      	str	r3, [r2, #56]	; 0x38
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <HAL_FSMC_MspInit+0x8c>)
 800086c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000876:	f64f 7388 	movw	r3, #65416	; 0xff88
 800087a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000888:	230c      	movs	r3, #12
 800088a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <HAL_FSMC_MspInit+0x90>)
 8000892:	f002 faa9 	bl	8002de8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000896:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800089a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008a8:	230c      	movs	r3, #12
 80008aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4619      	mov	r1, r3
 80008b0:	4806      	ldr	r0, [pc, #24]	; (80008cc <HAL_FSMC_MspInit+0x94>)
 80008b2:	f002 fa99 	bl	8002de8 <HAL_GPIO_Init>
 80008b6:	e000      	b.n	80008ba <HAL_FSMC_MspInit+0x82>
    return;
 80008b8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000034 	.word	0x20000034
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40020c00 	.word	0x40020c00

080008d0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008d8:	f7ff ffae 	bl	8000838 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	4b6f      	ldr	r3, [pc, #444]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a6e      	ldr	r2, [pc, #440]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000904:	f043 0310 	orr.w	r3, r3, #16
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b6c      	ldr	r3, [pc, #432]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0310 	and.w	r3, r3, #16
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	4b68      	ldr	r3, [pc, #416]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a67      	ldr	r2, [pc, #412]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b65      	ldr	r3, [pc, #404]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b61      	ldr	r3, [pc, #388]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a60      	ldr	r2, [pc, #384]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b5e      	ldr	r3, [pc, #376]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b5a      	ldr	r3, [pc, #360]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a59      	ldr	r2, [pc, #356]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b57      	ldr	r3, [pc, #348]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b53      	ldr	r3, [pc, #332]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a52      	ldr	r2, [pc, #328]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b50      	ldr	r3, [pc, #320]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b4c      	ldr	r3, [pc, #304]	; (8000abc <MX_GPIO_Init+0x1d8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a4b      	ldr	r2, [pc, #300]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b49      	ldr	r3, [pc, #292]	; (8000abc <MX_GPIO_Init+0x1d8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b45      	ldr	r3, [pc, #276]	; (8000abc <MX_GPIO_Init+0x1d8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a44      	ldr	r2, [pc, #272]	; (8000abc <MX_GPIO_Init+0x1d8>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b42      	ldr	r3, [pc, #264]	; (8000abc <MX_GPIO_Init+0x1d8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2170      	movs	r1, #112	; 0x70
 80009c2:	483f      	ldr	r0, [pc, #252]	; (8000ac0 <MX_GPIO_Init+0x1dc>)
 80009c4:	f002 fbac 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ce:	483d      	ldr	r0, [pc, #244]	; (8000ac4 <MX_GPIO_Init+0x1e0>)
 80009d0:	f002 fba6 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2140      	movs	r1, #64	; 0x40
 80009d8:	483b      	ldr	r0, [pc, #236]	; (8000ac8 <MX_GPIO_Init+0x1e4>)
 80009da:	f002 fba1 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e4:	4839      	ldr	r0, [pc, #228]	; (8000acc <MX_GPIO_Init+0x1e8>)
 80009e6:	f002 fb9b 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2108      	movs	r1, #8
 80009ee:	4838      	ldr	r0, [pc, #224]	; (8000ad0 <MX_GPIO_Init+0x1ec>)
 80009f0:	f002 fb96 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80009f4:	2370      	movs	r3, #112	; 0x70
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	482d      	ldr	r0, [pc, #180]	; (8000ac0 <MX_GPIO_Init+0x1dc>)
 8000a0c:	f002 f9ec 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4826      	ldr	r0, [pc, #152]	; (8000ac4 <MX_GPIO_Init+0x1e0>)
 8000a2a:	f002 f9dd 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a2e:	23c0      	movs	r3, #192	; 0xc0
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4822      	ldr	r0, [pc, #136]	; (8000acc <MX_GPIO_Init+0x1e8>)
 8000a42:	f002 f9d1 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a46:	2330      	movs	r3, #48	; 0x30
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <MX_GPIO_Init+0x1e0>)
 8000a5a:	f002 f9c5 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a5e:	2340      	movs	r3, #64	; 0x40
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4814      	ldr	r0, [pc, #80]	; (8000ac8 <MX_GPIO_Init+0x1e4>)
 8000a76:	f002 f9b7 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	480e      	ldr	r0, [pc, #56]	; (8000acc <MX_GPIO_Init+0x1e8>)
 8000a94:	f002 f9a8 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <MX_GPIO_Init+0x1ec>)
 8000ab0:	f002 f99a 	bl	8002de8 <HAL_GPIO_Init>

}
 8000ab4:	bf00      	nop
 8000ab6:	3730      	adds	r7, #48	; 0x30
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40021800 	.word	0x40021800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020c00 	.word	0x40020c00

08000ad4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ada:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <MX_I2C1_Init+0x54>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <MX_I2C1_Init+0x58>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000af2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b12:	f002 fb1f 	bl	8003154 <HAL_I2C_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b1c:	f001 fc5e 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000010c 	.word	0x2000010c
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	000186a0 	.word	0x000186a0

08000b30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <HAL_I2C_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12b      	bne.n	8000baa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b6e:	23c0      	movs	r3, #192	; 0xc0
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b72:	2312      	movs	r3, #18
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <HAL_I2C_MspInit+0x8c>)
 8000b8a:	f002 f92d 	bl	8002de8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <LCD_WR_REG+0x1c>)
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	8013      	strh	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	600ffffe 	.word	0x600ffffe

08000be0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <LCD_WR_DATA+0x1c>)
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	8053      	strh	r3, [r2, #2]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	600ffffe 	.word	0x600ffffe

08000c00 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <LCD_RD_DATA+0x20>)
 8000c08:	885b      	ldrh	r3, [r3, #2]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	b29b      	uxth	r3, r3
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	600ffffe 	.word	0x600ffffe

08000c24 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	4608      	mov	r0, r1
 8000c2e:	4611      	mov	r1, r2
 8000c30:	461a      	mov	r2, r3
 8000c32:	4623      	mov	r3, r4
 8000c34:	80fb      	strh	r3, [r7, #6]
 8000c36:	4603      	mov	r3, r0
 8000c38:	80bb      	strh	r3, [r7, #4]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	807b      	strh	r3, [r7, #2]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c42:	202a      	movs	r0, #42	; 0x2a
 8000c44:	f7ff ffbc 	bl	8000bc0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	0a1b      	lsrs	r3, r3, #8
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ffc6 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ffc0 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ffba 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ffb4 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000c78:	202b      	movs	r0, #43	; 0x2b
 8000c7a:	f7ff ffa1 	bl	8000bc0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000c7e:	88bb      	ldrh	r3, [r7, #4]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ffab 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000c8a:	88bb      	ldrh	r3, [r7, #4]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ffa5 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000c96:	883b      	ldrh	r3, [r7, #0]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff9f 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000ca2:	883b      	ldrh	r3, [r7, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff99 	bl	8000be0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000cae:	202c      	movs	r0, #44	; 0x2c
 8000cb0:	f7ff ff86 	bl	8000bc0 <LCD_WR_REG>
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd90      	pop	{r4, r7, pc}

08000cbc <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000cd0:	88fb      	ldrh	r3, [r7, #6]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <lcd_Clear+0x70>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <lcd_Clear+0x70>)
 8000ce0:	885b      	ldrh	r3, [r3, #2]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff ff9b 	bl	8000c24 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	81fb      	strh	r3, [r7, #14]
 8000cf2:	e011      	b.n	8000d18 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	81bb      	strh	r3, [r7, #12]
 8000cf8:	e006      	b.n	8000d08 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff6f 	bl	8000be0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d02:	89bb      	ldrh	r3, [r7, #12]
 8000d04:	3301      	adds	r3, #1
 8000d06:	81bb      	strh	r3, [r7, #12]
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <lcd_Clear+0x70>)
 8000d0a:	885b      	ldrh	r3, [r3, #2]
 8000d0c:	89ba      	ldrh	r2, [r7, #12]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3f3      	bcc.n	8000cfa <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d12:	89fb      	ldrh	r3, [r7, #14]
 8000d14:	3301      	adds	r3, #1
 8000d16:	81fb      	strh	r3, [r7, #14]
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <lcd_Clear+0x70>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	89fa      	ldrh	r2, [r7, #14]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3e8      	bcc.n	8000cf4 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000160 	.word	0x20000160

08000d30 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	80bb      	strh	r3, [r7, #4]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000d42:	88bb      	ldrh	r3, [r7, #4]
 8000d44:	88fa      	ldrh	r2, [r7, #6]
 8000d46:	88b9      	ldrh	r1, [r7, #4]
 8000d48:	88f8      	ldrh	r0, [r7, #6]
 8000d4a:	f7ff ff6b 	bl	8000c24 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff45 	bl	8000be0 <LCD_WR_DATA>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4604      	mov	r4, r0
 8000d68:	4608      	mov	r0, r1
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4623      	mov	r3, r4
 8000d70:	80fb      	strh	r3, [r7, #6]
 8000d72:	4603      	mov	r3, r0
 8000d74:	80bb      	strh	r3, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	70fb      	strb	r3, [r7, #3]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000d86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d8a:	085b      	lsrs	r3, r3, #1
 8000d8c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	08db      	lsrs	r3, r3, #3
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf14      	ite	ne
 8000da2:	2301      	movne	r3, #1
 8000da4:	2300      	moveq	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	4413      	add	r3, r2
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	fb12 f303 	smulbb	r3, r2, r3
 8000db6:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	3b20      	subs	r3, #32
 8000dbc:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	b29c      	uxth	r4, r3
 8000dcc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	88b9      	ldrh	r1, [r7, #4]
 8000dde:	88f8      	ldrh	r0, [r7, #6]
 8000de0:	4622      	mov	r2, r4
 8000de2:	f7ff ff1f 	bl	8000c24 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	827b      	strh	r3, [r7, #18]
 8000dea:	e07a      	b.n	8000ee2 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000dec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000df0:	2b0c      	cmp	r3, #12
 8000df2:	d028      	beq.n	8000e46 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000df4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000df8:	2b10      	cmp	r3, #16
 8000dfa:	d108      	bne.n	8000e0e <lcd_ShowChar+0xae>
 8000dfc:	78fa      	ldrb	r2, [r7, #3]
 8000dfe:	8a7b      	ldrh	r3, [r7, #18]
 8000e00:	493c      	ldr	r1, [pc, #240]	; (8000ef4 <lcd_ShowChar+0x194>)
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	440a      	add	r2, r1
 8000e06:	4413      	add	r3, r2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	75fb      	strb	r3, [r7, #23]
 8000e0c:	e01b      	b.n	8000e46 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000e0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e12:	2b18      	cmp	r3, #24
 8000e14:	d10b      	bne.n	8000e2e <lcd_ShowChar+0xce>
 8000e16:	78fa      	ldrb	r2, [r7, #3]
 8000e18:	8a79      	ldrh	r1, [r7, #18]
 8000e1a:	4837      	ldr	r0, [pc, #220]	; (8000ef8 <lcd_ShowChar+0x198>)
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	4403      	add	r3, r0
 8000e26:	440b      	add	r3, r1
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	75fb      	strb	r3, [r7, #23]
 8000e2c:	e00b      	b.n	8000e46 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000e2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e32:	2b20      	cmp	r3, #32
 8000e34:	d15a      	bne.n	8000eec <lcd_ShowChar+0x18c>
 8000e36:	78fa      	ldrb	r2, [r7, #3]
 8000e38:	8a7b      	ldrh	r3, [r7, #18]
 8000e3a:	4930      	ldr	r1, [pc, #192]	; (8000efc <lcd_ShowChar+0x19c>)
 8000e3c:	0192      	lsls	r2, r2, #6
 8000e3e:	440a      	add	r2, r1
 8000e40:	4413      	add	r3, r2
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	75bb      	strb	r3, [r7, #22]
 8000e4a:	e044      	b.n	8000ed6 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000e4c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d120      	bne.n	8000e96 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000e54:	7dfa      	ldrb	r2, [r7, #23]
 8000e56:	7dbb      	ldrb	r3, [r7, #22]
 8000e58:	fa42 f303 	asr.w	r3, r2, r3
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d004      	beq.n	8000e6e <lcd_ShowChar+0x10e>
 8000e64:	883b      	ldrh	r3, [r7, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff feba 	bl	8000be0 <LCD_WR_DATA>
 8000e6c:	e003      	b.n	8000e76 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000e6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff feb5 	bl	8000be0 <LCD_WR_DATA>
				m++;
 8000e76:	7d7b      	ldrb	r3, [r7, #21]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000e7c:	7d7b      	ldrb	r3, [r7, #21]
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e84:	fb02 f201 	mul.w	r2, r2, r1
 8000e88:	1a9b      	subs	r3, r3, r2
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d11f      	bne.n	8000ed0 <lcd_ShowChar+0x170>
				{
					m=0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	757b      	strb	r3, [r7, #21]
					break;
 8000e94:	e022      	b.n	8000edc <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000e96:	7dfa      	ldrb	r2, [r7, #23]
 8000e98:	7dbb      	ldrb	r3, [r7, #22]
 8000e9a:	fa42 f303 	asr.w	r3, r2, r3
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d005      	beq.n	8000eb2 <lcd_ShowChar+0x152>
 8000ea6:	883a      	ldrh	r2, [r7, #0]
 8000ea8:	88b9      	ldrh	r1, [r7, #4]
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff3f 	bl	8000d30 <lcd_DrawPoint>
				x++;
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000eb8:	88fa      	ldrh	r2, [r7, #6]
 8000eba:	8a3b      	ldrh	r3, [r7, #16]
 8000ebc:	1ad2      	subs	r2, r2, r3
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d105      	bne.n	8000ed0 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000ec4:	8a3b      	ldrh	r3, [r7, #16]
 8000ec6:	80fb      	strh	r3, [r7, #6]
					y++;
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	80bb      	strh	r3, [r7, #4]
					break;
 8000ece:	e005      	b.n	8000edc <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000ed0:	7dbb      	ldrb	r3, [r7, #22]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	75bb      	strb	r3, [r7, #22]
 8000ed6:	7dbb      	ldrb	r3, [r7, #22]
 8000ed8:	2b07      	cmp	r3, #7
 8000eda:	d9b7      	bls.n	8000e4c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000edc:	8a7b      	ldrh	r3, [r7, #18]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	827b      	strh	r3, [r7, #18]
 8000ee2:	8a7a      	ldrh	r2, [r7, #18]
 8000ee4:	89bb      	ldrh	r3, [r7, #12]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d380      	bcc.n	8000dec <lcd_ShowChar+0x8c>
 8000eea:	e000      	b.n	8000eee <lcd_ShowChar+0x18e>
		else return;
 8000eec:	bf00      	nop
				}
			}
		}
	}
}
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	080072c0 	.word	0x080072c0
 8000ef8:	080078b0 	.word	0x080078b0
 8000efc:	08008a80 	.word	0x08008a80

08000f00 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	460a      	mov	r2, r1
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000f14:	e004      	b.n	8000f20 <mypow+0x20>
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	fb02 f303 	mul.w	r3, r2, r3
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	1e5a      	subs	r2, r3, #1
 8000f24:	71ba      	strb	r2, [r7, #6]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f5      	bne.n	8000f16 <mypow+0x16>
	return result;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af04      	add	r7, sp, #16
 8000f3e:	4604      	mov	r4, r0
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	4623      	mov	r3, r4
 8000f48:	80fb      	strh	r3, [r7, #6]
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80bb      	strh	r3, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	807b      	strh	r3, [r7, #2]
 8000f52:	4613      	mov	r3, r2
 8000f54:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000f5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f5e:	085b      	lsrs	r3, r3, #1
 8000f60:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	e059      	b.n	800101c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000f68:	887c      	ldrh	r4, [r7, #2]
 8000f6a:	787a      	ldrb	r2, [r7, #1]
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	3b01      	subs	r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4619      	mov	r1, r3
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f7ff ffc1 	bl	8000f00 <mypow>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	fbb4 f1f3 	udiv	r1, r4, r3
 8000f84:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <lcd_ShowIntNum+0xf8>)
 8000f86:	fba3 2301 	umull	r2, r3, r3, r1
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	1aca      	subs	r2, r1, r3
 8000f96:	4613      	mov	r3, r2
 8000f98:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d121      	bne.n	8000fe4 <lcd_ShowIntNum+0xac>
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	787b      	ldrb	r3, [r7, #1]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	da1c      	bge.n	8000fe4 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000faa:	7b3b      	ldrb	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d117      	bne.n	8000fe0 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	7b7b      	ldrb	r3, [r7, #13]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	fb12 f303 	smulbb	r3, r2, r3
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b298      	uxth	r0, r3
 8000fc4:	8c3a      	ldrh	r2, [r7, #32]
 8000fc6:	88b9      	ldrh	r1, [r7, #4]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	2220      	movs	r2, #32
 8000fda:	f7ff fec1 	bl	8000d60 <lcd_ShowChar>
				continue;
 8000fde:	e01a      	b.n	8001016 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	7b7b      	ldrb	r3, [r7, #13]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	fb12 f303 	smulbb	r3, r2, r3
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	b298      	uxth	r0, r3
 8000ff8:	7b3b      	ldrb	r3, [r7, #12]
 8000ffa:	3330      	adds	r3, #48	; 0x30
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	8c3c      	ldrh	r4, [r7, #32]
 8001000:	88b9      	ldrh	r1, [r7, #4]
 8001002:	2300      	movs	r3, #0
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	4623      	mov	r3, r4
 8001012:	f7ff fea5 	bl	8000d60 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	3301      	adds	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	787b      	ldrb	r3, [r7, #1]
 8001020:	429a      	cmp	r2, r3
 8001022:	d3a1      	bcc.n	8000f68 <lcd_ShowIntNum+0x30>
	}
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	bf00      	nop
 8001030:	cccccccd 	.word	0xcccccccd

08001034 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	b2db      	uxtb	r3, r3
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d007      	beq.n	800105e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <lcd_SetDir+0x44>)
 8001050:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001054:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <lcd_SetDir+0x44>)
 8001058:	22f0      	movs	r2, #240	; 0xf0
 800105a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800105c:	e006      	b.n	800106c <lcd_SetDir+0x38>
		lcddev.width=240;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <lcd_SetDir+0x44>)
 8001060:	22f0      	movs	r2, #240	; 0xf0
 8001062:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <lcd_SetDir+0x44>)
 8001066:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800106a:	805a      	strh	r2, [r3, #2]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	20000160 	.word	0x20000160

0800107c <lcd_init>:


void lcd_init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001086:	48aa      	ldr	r0, [pc, #680]	; (8001330 <lcd_init+0x2b4>)
 8001088:	f002 f84a 	bl	8003120 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800108c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001090:	f001 fce2 	bl	8002a58 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109a:	48a5      	ldr	r0, [pc, #660]	; (8001330 <lcd_init+0x2b4>)
 800109c:	f002 f840 	bl	8003120 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a4:	f001 fcd8 	bl	8002a58 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff ffc3 	bl	8001034 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80010ae:	20d3      	movs	r0, #211	; 0xd3
 80010b0:	f7ff fd86 	bl	8000bc0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80010b4:	f7ff fda4 	bl	8000c00 <LCD_RD_DATA>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b9d      	ldr	r3, [pc, #628]	; (8001334 <lcd_init+0x2b8>)
 80010be:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010c0:	f7ff fd9e 	bl	8000c00 <LCD_RD_DATA>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b9a      	ldr	r3, [pc, #616]	; (8001334 <lcd_init+0x2b8>)
 80010ca:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010cc:	f7ff fd98 	bl	8000c00 <LCD_RD_DATA>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b97      	ldr	r3, [pc, #604]	; (8001334 <lcd_init+0x2b8>)
 80010d6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80010d8:	4b96      	ldr	r3, [pc, #600]	; (8001334 <lcd_init+0x2b8>)
 80010da:	889b      	ldrh	r3, [r3, #4]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b29a      	uxth	r2, r3
 80010e0:	4b94      	ldr	r3, [pc, #592]	; (8001334 <lcd_init+0x2b8>)
 80010e2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80010e4:	f7ff fd8c 	bl	8000c00 <LCD_RD_DATA>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b91      	ldr	r3, [pc, #580]	; (8001334 <lcd_init+0x2b8>)
 80010ee:	889b      	ldrh	r3, [r3, #4]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b8f      	ldr	r3, [pc, #572]	; (8001334 <lcd_init+0x2b8>)
 80010f6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80010f8:	20cf      	movs	r0, #207	; 0xcf
 80010fa:	f7ff fd61 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fd6e 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001104:	20c1      	movs	r0, #193	; 0xc1
 8001106:	f7ff fd6b 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800110a:	2030      	movs	r0, #48	; 0x30
 800110c:	f7ff fd68 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001110:	20ed      	movs	r0, #237	; 0xed
 8001112:	f7ff fd55 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001116:	2064      	movs	r0, #100	; 0x64
 8001118:	f7ff fd62 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800111c:	2003      	movs	r0, #3
 800111e:	f7ff fd5f 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001122:	2012      	movs	r0, #18
 8001124:	f7ff fd5c 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001128:	2081      	movs	r0, #129	; 0x81
 800112a:	f7ff fd59 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800112e:	20e8      	movs	r0, #232	; 0xe8
 8001130:	f7ff fd46 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001134:	2085      	movs	r0, #133	; 0x85
 8001136:	f7ff fd53 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800113a:	2010      	movs	r0, #16
 800113c:	f7ff fd50 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001140:	207a      	movs	r0, #122	; 0x7a
 8001142:	f7ff fd4d 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001146:	20cb      	movs	r0, #203	; 0xcb
 8001148:	f7ff fd3a 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800114c:	2039      	movs	r0, #57	; 0x39
 800114e:	f7ff fd47 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001152:	202c      	movs	r0, #44	; 0x2c
 8001154:	f7ff fd44 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff fd41 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800115e:	2034      	movs	r0, #52	; 0x34
 8001160:	f7ff fd3e 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff fd3b 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800116a:	20f7      	movs	r0, #247	; 0xf7
 800116c:	f7ff fd28 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001170:	2020      	movs	r0, #32
 8001172:	f7ff fd35 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001176:	20ea      	movs	r0, #234	; 0xea
 8001178:	f7ff fd22 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fd2f 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff fd2c 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001188:	20c0      	movs	r0, #192	; 0xc0
 800118a:	f7ff fd19 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800118e:	201b      	movs	r0, #27
 8001190:	f7ff fd26 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001194:	20c1      	movs	r0, #193	; 0xc1
 8001196:	f7ff fd13 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff fd20 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80011a0:	20c5      	movs	r0, #197	; 0xc5
 80011a2:	f7ff fd0d 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80011a6:	2030      	movs	r0, #48	; 0x30
 80011a8:	f7ff fd1a 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80011ac:	2030      	movs	r0, #48	; 0x30
 80011ae:	f7ff fd17 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80011b2:	20c7      	movs	r0, #199	; 0xc7
 80011b4:	f7ff fd04 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80011b8:	20b7      	movs	r0, #183	; 0xb7
 80011ba:	f7ff fd11 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80011be:	2036      	movs	r0, #54	; 0x36
 80011c0:	f7ff fcfe 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80011c4:	2008      	movs	r0, #8
 80011c6:	f7ff fd0b 	bl	8000be0 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80011ca:	203a      	movs	r0, #58	; 0x3a
 80011cc:	f7ff fcf8 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80011d0:	2055      	movs	r0, #85	; 0x55
 80011d2:	f7ff fd05 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80011d6:	20b1      	movs	r0, #177	; 0xb1
 80011d8:	f7ff fcf2 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff fcff 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80011e2:	201a      	movs	r0, #26
 80011e4:	f7ff fcfc 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80011e8:	20b6      	movs	r0, #182	; 0xb6
 80011ea:	f7ff fce9 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80011ee:	200a      	movs	r0, #10
 80011f0:	f7ff fcf6 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80011f4:	20a2      	movs	r0, #162	; 0xa2
 80011f6:	f7ff fcf3 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80011fa:	20f2      	movs	r0, #242	; 0xf2
 80011fc:	f7ff fce0 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fced 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001206:	2026      	movs	r0, #38	; 0x26
 8001208:	f7ff fcda 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff fce7 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001212:	20e0      	movs	r0, #224	; 0xe0
 8001214:	f7ff fcd4 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001218:	200f      	movs	r0, #15
 800121a:	f7ff fce1 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800121e:	202a      	movs	r0, #42	; 0x2a
 8001220:	f7ff fcde 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001224:	2028      	movs	r0, #40	; 0x28
 8001226:	f7ff fcdb 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800122a:	2008      	movs	r0, #8
 800122c:	f7ff fcd8 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001230:	200e      	movs	r0, #14
 8001232:	f7ff fcd5 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001236:	2008      	movs	r0, #8
 8001238:	f7ff fcd2 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800123c:	2054      	movs	r0, #84	; 0x54
 800123e:	f7ff fccf 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001242:	20a9      	movs	r0, #169	; 0xa9
 8001244:	f7ff fccc 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001248:	2043      	movs	r0, #67	; 0x43
 800124a:	f7ff fcc9 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800124e:	200a      	movs	r0, #10
 8001250:	f7ff fcc6 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001254:	200f      	movs	r0, #15
 8001256:	f7ff fcc3 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800125a:	2000      	movs	r0, #0
 800125c:	f7ff fcc0 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff fcbd 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fcba 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff fcb7 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001272:	20e1      	movs	r0, #225	; 0xe1
 8001274:	f7ff fca4 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001278:	2000      	movs	r0, #0
 800127a:	f7ff fcb1 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800127e:	2015      	movs	r0, #21
 8001280:	f7ff fcae 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001284:	2017      	movs	r0, #23
 8001286:	f7ff fcab 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800128a:	2007      	movs	r0, #7
 800128c:	f7ff fca8 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001290:	2011      	movs	r0, #17
 8001292:	f7ff fca5 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001296:	2006      	movs	r0, #6
 8001298:	f7ff fca2 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800129c:	202b      	movs	r0, #43	; 0x2b
 800129e:	f7ff fc9f 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80012a2:	2056      	movs	r0, #86	; 0x56
 80012a4:	f7ff fc9c 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80012a8:	203c      	movs	r0, #60	; 0x3c
 80012aa:	f7ff fc99 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80012ae:	2005      	movs	r0, #5
 80012b0:	f7ff fc96 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012b4:	2010      	movs	r0, #16
 80012b6:	f7ff fc93 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012ba:	200f      	movs	r0, #15
 80012bc:	f7ff fc90 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012c0:	203f      	movs	r0, #63	; 0x3f
 80012c2:	f7ff fc8d 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012c6:	203f      	movs	r0, #63	; 0x3f
 80012c8:	f7ff fc8a 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012cc:	200f      	movs	r0, #15
 80012ce:	f7ff fc87 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80012d2:	202b      	movs	r0, #43	; 0x2b
 80012d4:	f7ff fc74 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff fc81 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012de:	2000      	movs	r0, #0
 80012e0:	f7ff fc7e 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff fc7b 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80012ea:	203f      	movs	r0, #63	; 0x3f
 80012ec:	f7ff fc78 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80012f0:	202a      	movs	r0, #42	; 0x2a
 80012f2:	f7ff fc65 	bl	8000bc0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff fc72 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff fc6f 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff fc6c 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001308:	20ef      	movs	r0, #239	; 0xef
 800130a:	f7ff fc69 	bl	8000be0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800130e:	2011      	movs	r0, #17
 8001310:	f7ff fc56 	bl	8000bc0 <LCD_WR_REG>
	HAL_Delay(120);
 8001314:	2078      	movs	r0, #120	; 0x78
 8001316:	f001 fb9f 	bl	8002a58 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800131a:	2029      	movs	r0, #41	; 0x29
 800131c:	f7ff fc50 	bl	8000bc0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001320:	2201      	movs	r2, #1
 8001322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001326:	4804      	ldr	r0, [pc, #16]	; (8001338 <lcd_init+0x2bc>)
 8001328:	f001 fefa 	bl	8003120 <HAL_GPIO_WritePin>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40020800 	.word	0x40020800
 8001334:	20000160 	.word	0x20000160
 8001338:	40020000 	.word	0x40020000

0800133c <_draw_circle_8>:

void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	b29b      	uxth	r3, r3
 8001352:	4413      	add	r3, r2
 8001354:	b298      	uxth	r0, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	b29a      	uxth	r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b29b      	uxth	r3, r3
 800135e:	4413      	add	r3, r2
 8001360:	b29b      	uxth	r3, r3
 8001362:	8b3a      	ldrh	r2, [r7, #24]
 8001364:	4619      	mov	r1, r3
 8001366:	f7ff fce3 	bl	8000d30 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	b29a      	uxth	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	b29b      	uxth	r3, r3
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	b298      	uxth	r0, r3
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	b29a      	uxth	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	b29b      	uxth	r3, r3
 8001382:	8b3a      	ldrh	r2, [r7, #24]
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fcd3 	bl	8000d30 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	b29a      	uxth	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	b29b      	uxth	r3, r3
 8001392:	4413      	add	r3, r2
 8001394:	b298      	uxth	r0, r3
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	b29a      	uxth	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	8b3a      	ldrh	r2, [r7, #24]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff fcc3 	bl	8000d30 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	b298      	uxth	r0, r3
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	8b3a      	ldrh	r2, [r7, #24]
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fcb3 	bl	8000d30 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4413      	add	r3, r2
 80013d4:	b298      	uxth	r0, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	b29a      	uxth	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4413      	add	r3, r2
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	8b3a      	ldrh	r2, [r7, #24]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fca3 	bl	8000d30 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	b298      	uxth	r0, r3
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	4413      	add	r3, r2
 8001400:	b29b      	uxth	r3, r3
 8001402:	8b3a      	ldrh	r2, [r7, #24]
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff fc93 	bl	8000d30 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	b29a      	uxth	r2, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4413      	add	r3, r2
 8001414:	b298      	uxth	r0, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	b29a      	uxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	b29b      	uxth	r3, r3
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	b29b      	uxth	r3, r3
 8001422:	8b3a      	ldrh	r2, [r7, #24]
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fc83 	bl	8000d30 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	b29a      	uxth	r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b29b      	uxth	r3, r3
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	b298      	uxth	r0, r3
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	b29a      	uxth	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	b29b      	uxth	r3, r3
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	b29b      	uxth	r3, r3
 8001442:	8b3a      	ldrh	r2, [r7, #24]
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fc73 	bl	8000d30 <lcd_DrawPoint>
}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b08a      	sub	sp, #40	; 0x28
 8001456:	af02      	add	r7, sp, #8
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4613      	mov	r3, r2
 8001460:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	f1c3 0303 	rsb	r3, r3, #3
 8001472:	613b      	str	r3, [r7, #16]


	if (fill)
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001476:	2b00      	cmp	r3, #0
 8001478:	d04f      	beq.n	800151a <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 800147a:	e029      	b.n	80014d0 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e00a      	b.n	8001498 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	69fa      	ldr	r2, [r7, #28]
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f7ff ff55 	bl	800133c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	429a      	cmp	r2, r3
 800149e:	ddf0      	ble.n	8001482 <lcd_DrawCircle+0x30>

			if (d < 0) {
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	da06      	bge.n	80014b4 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	009a      	lsls	r2, r3, #2
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4413      	add	r3, r2
 80014ae:	3306      	adds	r3, #6
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	e00a      	b.n	80014ca <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	009a      	lsls	r2, r3, #2
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4413      	add	r3, r2
 80014c0:	330a      	adds	r3, #10
 80014c2:	613b      	str	r3, [r7, #16]
				y--;
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	ddd1      	ble.n	800147c <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80014d8:	e023      	b.n	8001522 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	68b9      	ldr	r1, [r7, #8]
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f7ff ff29 	bl	800133c <_draw_circle_8>
			if (d < 0) {
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da06      	bge.n	80014fe <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	009a      	lsls	r2, r3, #2
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4413      	add	r3, r2
 80014f8:	3306      	adds	r3, #6
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	e00a      	b.n	8001514 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	009a      	lsls	r2, r3, #2
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4413      	add	r3, r2
 800150a:	330a      	adds	r3, #10
 800150c:	613b      	str	r3, [r7, #16]
				y--;
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	3b01      	subs	r3, #1
 8001512:	61bb      	str	r3, [r7, #24]
			x++;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	3301      	adds	r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	429a      	cmp	r2, r3
 8001520:	dddb      	ble.n	80014da <lcd_DrawCircle+0x88>
}
 8001522:	bf00      	nop
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b08b      	sub	sp, #44	; 0x2c
 8001530:	af04      	add	r7, sp, #16
 8001532:	60ba      	str	r2, [r7, #8]
 8001534:	461a      	mov	r2, r3
 8001536:	4603      	mov	r3, r0
 8001538:	81fb      	strh	r3, [r7, #14]
 800153a:	460b      	mov	r3, r1
 800153c:	81bb      	strh	r3, [r7, #12]
 800153e:	4613      	mov	r3, r2
 8001540:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001546:	2300      	movs	r3, #0
 8001548:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800154a:	e048      	b.n	80015de <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d145      	bne.n	80015de <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001552:	89fa      	ldrh	r2, [r7, #14]
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <lcd_ShowStr+0xc4>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800155e:	085b      	lsrs	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	429a      	cmp	r2, r3
 8001566:	dc3f      	bgt.n	80015e8 <lcd_ShowStr+0xbc>
 8001568:	89ba      	ldrh	r2, [r7, #12]
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <lcd_ShowStr+0xc4>)
 800156c:	885b      	ldrh	r3, [r3, #2]
 800156e:	4619      	mov	r1, r3
 8001570:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001574:	1acb      	subs	r3, r1, r3
 8001576:	429a      	cmp	r2, r3
 8001578:	dc36      	bgt.n	80015e8 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b80      	cmp	r3, #128	; 0x80
 8001580:	d902      	bls.n	8001588 <lcd_ShowStr+0x5c>
 8001582:	2301      	movs	r3, #1
 8001584:	75fb      	strb	r3, [r7, #23]
 8001586:	e02a      	b.n	80015de <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b0d      	cmp	r3, #13
 800158e:	d10b      	bne.n	80015a8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001590:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001594:	b29a      	uxth	r2, r3
 8001596:	89bb      	ldrh	r3, [r7, #12]
 8001598:	4413      	add	r3, r2
 800159a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800159c:	8abb      	ldrh	r3, [r7, #20]
 800159e:	81fb      	strh	r3, [r7, #14]
					str++;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	3301      	adds	r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	e017      	b.n	80015d8 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	88fc      	ldrh	r4, [r7, #6]
 80015ae:	89b9      	ldrh	r1, [r7, #12]
 80015b0:	89f8      	ldrh	r0, [r7, #14]
 80015b2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80015b6:	9302      	str	r3, [sp, #8]
 80015b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	4623      	mov	r3, r4
 80015c4:	f7ff fbcc 	bl	8000d60 <lcd_ShowChar>
					x+=sizey/2;
 80015c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	89fb      	ldrh	r3, [r7, #14]
 80015d4:	4413      	add	r3, r2
 80015d6:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	3301      	adds	r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1b2      	bne.n	800154c <lcd_ShowStr+0x20>
 80015e6:	e000      	b.n	80015ea <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80015e8:	bf00      	nop
			}
		}
	}
}
 80015ea:	371c      	adds	r7, #28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	20000160 	.word	0x20000160

080015f4 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015f8:	2201      	movs	r2, #1
 80015fa:	2140      	movs	r1, #64	; 0x40
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <led7_init+0x14>)
 80015fe:	f001 fd8f 	bl	8003120 <HAL_GPIO_WritePin>
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40021800 	.word	0x40021800

0800160c <led7_Scan>:

void led7_Scan(){
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <led7_Scan+0x104>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <led7_Scan+0x104>)
 800161a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800161c:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <led7_Scan+0x108>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a3d      	ldr	r2, [pc, #244]	; (8001718 <led7_Scan+0x10c>)
 8001622:	5cd3      	ldrb	r3, [r2, r3]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	b21a      	sxth	r2, r3
 8001628:	4b39      	ldr	r3, [pc, #228]	; (8001710 <led7_Scan+0x104>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21b      	sxth	r3, r3
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b36      	ldr	r3, [pc, #216]	; (8001710 <led7_Scan+0x104>)
 8001636:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001638:	4b36      	ldr	r3, [pc, #216]	; (8001714 <led7_Scan+0x108>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b03      	cmp	r3, #3
 800163e:	d847      	bhi.n	80016d0 <led7_Scan+0xc4>
 8001640:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <led7_Scan+0x3c>)
 8001642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001646:	bf00      	nop
 8001648:	08001659 	.word	0x08001659
 800164c:	08001677 	.word	0x08001677
 8001650:	08001695 	.word	0x08001695
 8001654:	080016b3 	.word	0x080016b3
	case 0:
		spi_buffer |= 0x00b0;
 8001658:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <led7_Scan+0x104>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001660:	b29a      	uxth	r2, r3
 8001662:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <led7_Scan+0x104>)
 8001664:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <led7_Scan+0x104>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b27      	ldr	r3, [pc, #156]	; (8001710 <led7_Scan+0x104>)
 8001672:	801a      	strh	r2, [r3, #0]
		break;
 8001674:	e02d      	b.n	80016d2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <led7_Scan+0x104>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <led7_Scan+0x104>)
 8001682:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001684:	4b22      	ldr	r3, [pc, #136]	; (8001710 <led7_Scan+0x104>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	f023 0320 	bic.w	r3, r3, #32
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <led7_Scan+0x104>)
 8001690:	801a      	strh	r2, [r3, #0]
		break;
 8001692:	e01e      	b.n	80016d2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <led7_Scan+0x104>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800169c:	b29a      	uxth	r2, r3
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <led7_Scan+0x104>)
 80016a0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <led7_Scan+0x104>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	f023 0310 	bic.w	r3, r3, #16
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b18      	ldr	r3, [pc, #96]	; (8001710 <led7_Scan+0x104>)
 80016ae:	801a      	strh	r2, [r3, #0]
		break;
 80016b0:	e00f      	b.n	80016d2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <led7_Scan+0x104>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <led7_Scan+0x104>)
 80016be:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <led7_Scan+0x104>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <led7_Scan+0x104>)
 80016cc:	801a      	strh	r2, [r3, #0]
		break;
 80016ce:	e000      	b.n	80016d2 <led7_Scan+0xc6>
	default:
		break;
 80016d0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <led7_Scan+0x108>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	425a      	negs	r2, r3
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	bf58      	it	pl
 80016e4:	4253      	negpl	r3, r2
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <led7_Scan+0x108>)
 80016e8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2140      	movs	r1, #64	; 0x40
 80016ee:	480b      	ldr	r0, [pc, #44]	; (800171c <led7_Scan+0x110>)
 80016f0:	f001 fd16 	bl	8003120 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80016f4:	2301      	movs	r3, #1
 80016f6:	2202      	movs	r2, #2
 80016f8:	4905      	ldr	r1, [pc, #20]	; (8001710 <led7_Scan+0x104>)
 80016fa:	4809      	ldr	r0, [pc, #36]	; (8001720 <led7_Scan+0x114>)
 80016fc:	f003 fb15 	bl	8004d2a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001700:	2201      	movs	r2, #1
 8001702:	2140      	movs	r1, #64	; 0x40
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <led7_Scan+0x110>)
 8001706:	f001 fd0b 	bl	8003120 <HAL_GPIO_WritePin>
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000004 	.word	0x20000004
 8001714:	20000038 	.word	0x20000038
 8001718:	20000000 	.word	0x20000000
 800171c:	40021800 	.word	0x40021800
 8001720:	2000019c 	.word	0x2000019c

08001724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001728:	f001 f924 	bl	8002974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172c:	f000 f83c 	bl	80017a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001730:	f7ff f8d8 	bl	80008e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001734:	f000 ff9e 	bl	8002674 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001738:	f000 fea6 	bl	8002488 <MX_SPI1_Init>
  MX_FSMC_Init();
 800173c:	f7ff f802 	bl	8000744 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001740:	f7ff f9c8 	bl	8000ad4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001744:	f001 f834 	bl	80027b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001748:	f000 f898 	bl	800187c <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(WHITE);
 800174c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001750:	f7ff fab4 	bl	8000cbc <lcd_Clear>
  updateTime();
 8001754:	f000 f962 	bl	8001a1c <updateTime>
  while (1)
  {
    /* USER CODE END WHILE */
    while(!flag_timer2);
 8001758:	bf00      	nop
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <main+0x78>)
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0fb      	beq.n	800175a <main+0x36>
	flag_timer2 = 0;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <main+0x78>)
 8001764:	2200      	movs	r2, #0
 8001766:	801a      	strh	r2, [r3, #0]
    count_toggle_blink++;
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <main+0x7c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <main+0x7c>)
 8001770:	6013      	str	r3, [r2, #0]
    if (count_toggle_blink > 10) {
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <main+0x7c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b0a      	cmp	r3, #10
 8001778:	dd08      	ble.n	800178c <main+0x68>
      count_toggle_blink = 0;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <main+0x7c>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
      toggle_blink = 1 - toggle_blink;
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <main+0x80>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f1c3 0301 	rsb	r3, r3, #1
 8001788:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <main+0x80>)
 800178a:	6013      	str	r3, [r2, #0]
    }
    button_Scan();
 800178c:	f7fe fea4 	bl	80004d8 <button_Scan>
    ds3231_ReadTime();
 8001790:	f7fe ff74 	bl	800067c <ds3231_ReadTime>
    my_clock();
 8001794:	f000 fd18 	bl	80021c8 <my_clock>
    while(!flag_timer2);
 8001798:	e7de      	b.n	8001758 <main+0x34>
 800179a:	bf00      	nop
 800179c:	20000084 	.word	0x20000084
 80017a0:	20000044 	.word	0x20000044
 80017a4:	20000040 	.word	0x20000040

080017a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	; 0x50
 80017ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	2230      	movs	r2, #48	; 0x30
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 fd58 	bl	800726c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	4b28      	ldr	r3, [pc, #160]	; (8001874 <SystemClock_Config+0xcc>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	4a27      	ldr	r2, [pc, #156]	; (8001874 <SystemClock_Config+0xcc>)
 80017d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017da:	6413      	str	r3, [r2, #64]	; 0x40
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <SystemClock_Config+0xcc>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <SystemClock_Config+0xd0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a21      	ldr	r2, [pc, #132]	; (8001878 <SystemClock_Config+0xd0>)
 80017f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <SystemClock_Config+0xd0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001808:	2301      	movs	r3, #1
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800180c:	2310      	movs	r3, #16
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001810:	2302      	movs	r3, #2
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001814:	2300      	movs	r3, #0
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001818:	2308      	movs	r3, #8
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800181c:	23a8      	movs	r3, #168	; 0xa8
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001820:	2302      	movs	r3, #2
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001824:	2304      	movs	r3, #4
 8001826:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	4618      	mov	r0, r3
 800182e:	f002 fd7f 	bl	8004330 <HAL_RCC_OscConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001838:	f000 fdd0 	bl	80023dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183c:	230f      	movs	r3, #15
 800183e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001840:	2302      	movs	r3, #2
 8001842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001848:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800184c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800184e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001852:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2105      	movs	r1, #5
 800185a:	4618      	mov	r0, r3
 800185c:	f002 ffe0 	bl	8004820 <HAL_RCC_ClockConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001866:	f000 fdb9 	bl	80023dc <Error_Handler>
  }
}
 800186a:	bf00      	nop
 800186c:	3750      	adds	r7, #80	; 0x50
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40007000 	.word	0x40007000

0800187c <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  timer_init();
 8001880:	f000 fdb2 	bl	80023e8 <timer_init>
  led7_init();
 8001884:	f7ff feb6 	bl	80015f4 <led7_init>
  button_init();
 8001888:	f7fe fe1a 	bl	80004c0 <button_init>
  lcd_init();
 800188c:	f7ff fbf6 	bl	800107c <lcd_init>
  uart_init_rs232();
 8001890:	f000 ff62 	bl	8002758 <uart_init_rs232>
  ds3231_init();
 8001894:	f7fe fe8c 	bl	80005b0 <ds3231_init>
  setTimer2(50);
 8001898:	2032      	movs	r0, #50	; 0x32
 800189a:	f000 fdaf 	bl	80023fc <setTimer2>
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <normal_clock>:

void normal_clock() {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  static int count = 0;
  if (count == 20) {
 80018a8:	4b4e      	ldr	r3, [pc, #312]	; (80019e4 <normal_clock+0x140>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b14      	cmp	r3, #20
 80018ae:	f040 8091 	bne.w	80019d4 <normal_clock+0x130>
    lcd_Clear(WHITE);
 80018b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018b6:	f7ff fa01 	bl	8000cbc <lcd_Clear>
    count = 0;
 80018ba:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <normal_clock+0x140>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
    ds3231_sec = (ds3231_sec < 59) ? ds3231_sec + 1 : 0;
 80018c0:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <normal_clock+0x144>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b3a      	cmp	r3, #58	; 0x3a
 80018c6:	d804      	bhi.n	80018d2 <normal_clock+0x2e>
 80018c8:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <normal_clock+0x144>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	e000      	b.n	80018d4 <normal_clock+0x30>
 80018d2:	2300      	movs	r3, #0
 80018d4:	4a44      	ldr	r2, [pc, #272]	; (80019e8 <normal_clock+0x144>)
 80018d6:	7013      	strb	r3, [r2, #0]
    if (ds3231_sec == 0) {
 80018d8:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <normal_clock+0x144>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d15b      	bne.n	8001998 <normal_clock+0xf4>
      ds3231_min = (ds3231_min < 59) ? ds3231_min + 1 : 0;
 80018e0:	4b42      	ldr	r3, [pc, #264]	; (80019ec <normal_clock+0x148>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b3a      	cmp	r3, #58	; 0x3a
 80018e6:	d804      	bhi.n	80018f2 <normal_clock+0x4e>
 80018e8:	4b40      	ldr	r3, [pc, #256]	; (80019ec <normal_clock+0x148>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	e000      	b.n	80018f4 <normal_clock+0x50>
 80018f2:	2300      	movs	r3, #0
 80018f4:	4a3d      	ldr	r2, [pc, #244]	; (80019ec <normal_clock+0x148>)
 80018f6:	7013      	strb	r3, [r2, #0]
      if (ds3231_min == 0) {
 80018f8:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <normal_clock+0x148>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d14b      	bne.n	8001998 <normal_clock+0xf4>
        ds3231_hours = (ds3231_hours < 23) ? ds3231_hours + 1 : 0;
 8001900:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <normal_clock+0x14c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b16      	cmp	r3, #22
 8001906:	d804      	bhi.n	8001912 <normal_clock+0x6e>
 8001908:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <normal_clock+0x14c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	e000      	b.n	8001914 <normal_clock+0x70>
 8001912:	2300      	movs	r3, #0
 8001914:	4a36      	ldr	r2, [pc, #216]	; (80019f0 <normal_clock+0x14c>)
 8001916:	7013      	strb	r3, [r2, #0]
        if (ds3231_hours == 0) {
 8001918:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <normal_clock+0x14c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d13b      	bne.n	8001998 <normal_clock+0xf4>
          ds3231_day = (ds3231_day < 7) ? ds3231_day + 1 : 0;
 8001920:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <normal_clock+0x150>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b06      	cmp	r3, #6
 8001926:	d804      	bhi.n	8001932 <normal_clock+0x8e>
 8001928:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <normal_clock+0x150>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	3301      	adds	r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	e000      	b.n	8001934 <normal_clock+0x90>
 8001932:	2300      	movs	r3, #0
 8001934:	4a2f      	ldr	r2, [pc, #188]	; (80019f4 <normal_clock+0x150>)
 8001936:	7013      	strb	r3, [r2, #0]
          if (ds3231_day == 0) {
 8001938:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <normal_clock+0x150>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d12b      	bne.n	8001998 <normal_clock+0xf4>
            ds3231_date = (ds3231_date < 31) ? ds3231_date + 1 : 0;
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <normal_clock+0x154>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b1e      	cmp	r3, #30
 8001946:	d804      	bhi.n	8001952 <normal_clock+0xae>
 8001948:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <normal_clock+0x154>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	b2db      	uxtb	r3, r3
 8001950:	e000      	b.n	8001954 <normal_clock+0xb0>
 8001952:	2300      	movs	r3, #0
 8001954:	4a28      	ldr	r2, [pc, #160]	; (80019f8 <normal_clock+0x154>)
 8001956:	7013      	strb	r3, [r2, #0]
            if (ds3231_date == 0) {
 8001958:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <normal_clock+0x154>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d11b      	bne.n	8001998 <normal_clock+0xf4>
              ds3231_month = (ds3231_month < 12) ? ds3231_month + 1 : 0;
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <normal_clock+0x158>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b0b      	cmp	r3, #11
 8001966:	d804      	bhi.n	8001972 <normal_clock+0xce>
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <normal_clock+0x158>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	e000      	b.n	8001974 <normal_clock+0xd0>
 8001972:	2300      	movs	r3, #0
 8001974:	4a21      	ldr	r2, [pc, #132]	; (80019fc <normal_clock+0x158>)
 8001976:	7013      	strb	r3, [r2, #0]
              if (ds3231_month == 0) {
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <normal_clock+0x158>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10b      	bne.n	8001998 <normal_clock+0xf4>
                ds3231_year = (ds3231_year < 99) ? ds3231_year + 1 : 0;
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <normal_clock+0x15c>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b62      	cmp	r3, #98	; 0x62
 8001986:	d804      	bhi.n	8001992 <normal_clock+0xee>
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <normal_clock+0x15c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	b2db      	uxtb	r3, r3
 8001990:	e000      	b.n	8001994 <normal_clock+0xf0>
 8001992:	2300      	movs	r3, #0
 8001994:	4a1a      	ldr	r2, [pc, #104]	; (8001a00 <normal_clock+0x15c>)
 8001996:	7013      	strb	r3, [r2, #0]
            }
          }
        }
      }
    }
    temp_sec = ds3231_sec;
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <normal_clock+0x144>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <normal_clock+0x160>)
 80019a0:	601a      	str	r2, [r3, #0]
      temp_min = ds3231_min;
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <normal_clock+0x148>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <normal_clock+0x164>)
 80019aa:	601a      	str	r2, [r3, #0]
      temp_hour = ds3231_hours;
 80019ac:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <normal_clock+0x14c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <normal_clock+0x168>)
 80019b4:	601a      	str	r2, [r3, #0]
      temp_date = ds3231_date;
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <normal_clock+0x154>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <normal_clock+0x16c>)
 80019be:	601a      	str	r2, [r3, #0]
      temp_month = ds3231_month;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <normal_clock+0x158>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <normal_clock+0x170>)
 80019c8:	601a      	str	r2, [r3, #0]
      temp_year = ds3231_year;
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <normal_clock+0x15c>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <normal_clock+0x174>)
 80019d2:	601a      	str	r2, [r3, #0]
  }

  count++;
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <normal_clock+0x140>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3301      	adds	r3, #1
 80019da:	4a02      	ldr	r2, [pc, #8]	; (80019e4 <normal_clock+0x140>)
 80019dc:	6013      	str	r3, [r2, #0]
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000007c 	.word	0x2000007c
 80019e8:	200000ac 	.word	0x200000ac
 80019ec:	200000ae 	.word	0x200000ae
 80019f0:	200000b1 	.word	0x200000b1
 80019f4:	200000b0 	.word	0x200000b0
 80019f8:	200000af 	.word	0x200000af
 80019fc:	200000b2 	.word	0x200000b2
 8001a00:	200000ad 	.word	0x200000ad
 8001a04:	20000054 	.word	0x20000054
 8001a08:	20000050 	.word	0x20000050
 8001a0c:	2000004c 	.word	0x2000004c
 8001a10:	20000058 	.word	0x20000058
 8001a14:	2000005c 	.word	0x2000005c
 8001a18:	20000060 	.word	0x20000060

08001a1c <updateTime>:

void updateTime() {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  ds3231_Write(ADDRESS_YEAR, 24);
 8001a20:	2118      	movs	r1, #24
 8001a22:	2006      	movs	r0, #6
 8001a24:	f7fe fe08 	bl	8000638 <ds3231_Write>
  ds3231_Write(ADDRESS_MONTH, 11);
 8001a28:	210b      	movs	r1, #11
 8001a2a:	2005      	movs	r0, #5
 8001a2c:	f7fe fe04 	bl	8000638 <ds3231_Write>
  ds3231_Write(ADDRESS_DATE, 20);
 8001a30:	2114      	movs	r1, #20
 8001a32:	2004      	movs	r0, #4
 8001a34:	f7fe fe00 	bl	8000638 <ds3231_Write>
  ds3231_Write(ADDRESS_DAY, 6);
 8001a38:	2106      	movs	r1, #6
 8001a3a:	2003      	movs	r0, #3
 8001a3c:	f7fe fdfc 	bl	8000638 <ds3231_Write>
  ds3231_Write(ADDRESS_HOUR, 12);
 8001a40:	210c      	movs	r1, #12
 8001a42:	2002      	movs	r0, #2
 8001a44:	f7fe fdf8 	bl	8000638 <ds3231_Write>
  ds3231_Write(ADDRESS_MIN, 7);
 8001a48:	2107      	movs	r1, #7
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f7fe fdf4 	bl	8000638 <ds3231_Write>
  ds3231_Write(ADDRESS_SEC, 20);
 8001a50:	2114      	movs	r1, #20
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7fe fdf0 	bl	8000638 <ds3231_Write>
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <display_clock>:
void display_clock() {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af04      	add	r7, sp, #16
  lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, WHITE, 24);
 8001a62:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <display_clock+0xe0>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	2318      	movs	r3, #24
 8001a6a:	9302      	str	r3, [sp, #8]
 8001a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	2300      	movs	r3, #0
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2302      	movs	r3, #2
 8001a78:	2164      	movs	r1, #100	; 0x64
 8001a7a:	2046      	movs	r0, #70	; 0x46
 8001a7c:	f7ff fa5c 	bl	8000f38 <lcd_ShowIntNum>
  lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, WHITE, 24);
 8001a80:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <display_clock+0xe4>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	2318      	movs	r3, #24
 8001a88:	9302      	str	r3, [sp, #8]
 8001a8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	2300      	movs	r3, #0
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2302      	movs	r3, #2
 8001a96:	2164      	movs	r1, #100	; 0x64
 8001a98:	206e      	movs	r0, #110	; 0x6e
 8001a9a:	f7ff fa4d 	bl	8000f38 <lcd_ShowIntNum>
  lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, WHITE, 24);
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <display_clock+0xe8>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	2318      	movs	r3, #24
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	2164      	movs	r1, #100	; 0x64
 8001ab6:	2096      	movs	r0, #150	; 0x96
 8001ab8:	f7ff fa3e 	bl	8000f38 <lcd_ShowIntNum>
  lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <display_clock+0xec>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	2318      	movs	r3, #24
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	2182      	movs	r1, #130	; 0x82
 8001ad4:	2014      	movs	r0, #20
 8001ad6:	f7ff fa2f 	bl	8000f38 <lcd_ShowIntNum>
  lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001ada:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <display_clock+0xf0>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	2318      	movs	r3, #24
 8001ae2:	9302      	str	r3, [sp, #8]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2302      	movs	r3, #2
 8001af0:	2182      	movs	r1, #130	; 0x82
 8001af2:	2046      	movs	r0, #70	; 0x46
 8001af4:	f7ff fa20 	bl	8000f38 <lcd_ShowIntNum>
  lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <display_clock+0xf4>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	2318      	movs	r3, #24
 8001b00:	9302      	str	r3, [sp, #8]
 8001b02:	2300      	movs	r3, #0
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	2182      	movs	r1, #130	; 0x82
 8001b10:	206e      	movs	r0, #110	; 0x6e
 8001b12:	f7ff fa11 	bl	8000f38 <lcd_ShowIntNum>
  lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <display_clock+0xf8>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	2318      	movs	r3, #24
 8001b1e:	9302      	str	r3, [sp, #8]
 8001b20:	2300      	movs	r3, #0
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	2182      	movs	r1, #130	; 0x82
 8001b2e:	2096      	movs	r0, #150	; 0x96
 8001b30:	f7ff fa02 	bl	8000f38 <lcd_ShowIntNum>
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200000b1 	.word	0x200000b1
 8001b40:	200000ae 	.word	0x200000ae
 8001b44:	200000ac 	.word	0x200000ac
 8001b48:	200000b0 	.word	0x200000b0
 8001b4c:	200000af 	.word	0x200000af
 8001b50:	200000b2 	.word	0x200000b2
 8001b54:	200000ad 	.word	0x200000ad

08001b58 <display_temp_clock>:
void display_temp_clock() {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af04      	add	r7, sp, #16
  lcd_ShowIntNum(70, 100, temp_hour, 2, BLACK, WHITE, 24);
 8001b5e:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <display_temp_clock+0xe0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	2318      	movs	r3, #24
 8001b66:	9302      	str	r3, [sp, #8]
 8001b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2302      	movs	r3, #2
 8001b74:	2164      	movs	r1, #100	; 0x64
 8001b76:	2046      	movs	r0, #70	; 0x46
 8001b78:	f7ff f9de 	bl	8000f38 <lcd_ShowIntNum>
  lcd_ShowIntNum(110, 100, temp_min, 2, BLACK, WHITE, 24);
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <display_temp_clock+0xe4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	2318      	movs	r3, #24
 8001b84:	9302      	str	r3, [sp, #8]
 8001b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2302      	movs	r3, #2
 8001b92:	2164      	movs	r1, #100	; 0x64
 8001b94:	206e      	movs	r0, #110	; 0x6e
 8001b96:	f7ff f9cf 	bl	8000f38 <lcd_ShowIntNum>
  lcd_ShowIntNum(150, 100, temp_sec, 2, BLACK, WHITE, 24);
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <display_temp_clock+0xe8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	2318      	movs	r3, #24
 8001ba2:	9302      	str	r3, [sp, #8]
 8001ba4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	2300      	movs	r3, #0
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2302      	movs	r3, #2
 8001bb0:	2164      	movs	r1, #100	; 0x64
 8001bb2:	2096      	movs	r0, #150	; 0x96
 8001bb4:	f7ff f9c0 	bl	8000f38 <lcd_ShowIntNum>
  lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <display_temp_clock+0xec>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	2318      	movs	r3, #24
 8001bc0:	9302      	str	r3, [sp, #8]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2302      	movs	r3, #2
 8001bce:	2182      	movs	r1, #130	; 0x82
 8001bd0:	2014      	movs	r0, #20
 8001bd2:	f7ff f9b1 	bl	8000f38 <lcd_ShowIntNum>
  lcd_ShowIntNum(70, 130, temp_date, 2, YELLOW, BLACK, 24);
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <display_temp_clock+0xf0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	2318      	movs	r3, #24
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	2300      	movs	r3, #0
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2302      	movs	r3, #2
 8001bec:	2182      	movs	r1, #130	; 0x82
 8001bee:	2046      	movs	r0, #70	; 0x46
 8001bf0:	f7ff f9a2 	bl	8000f38 <lcd_ShowIntNum>
  lcd_ShowIntNum(110, 130, temp_month, 2, YELLOW, BLACK, 24);
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <display_temp_clock+0xf4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	2318      	movs	r3, #24
 8001bfc:	9302      	str	r3, [sp, #8]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2302      	movs	r3, #2
 8001c0a:	2182      	movs	r1, #130	; 0x82
 8001c0c:	206e      	movs	r0, #110	; 0x6e
 8001c0e:	f7ff f993 	bl	8000f38 <lcd_ShowIntNum>
  lcd_ShowIntNum(150, 130, temp_year, 2, YELLOW, BLACK, 24);
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <display_temp_clock+0xf8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	2318      	movs	r3, #24
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2302      	movs	r3, #2
 8001c28:	2182      	movs	r1, #130	; 0x82
 8001c2a:	2096      	movs	r0, #150	; 0x96
 8001c2c:	f7ff f984 	bl	8000f38 <lcd_ShowIntNum>
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000004c 	.word	0x2000004c
 8001c3c:	20000050 	.word	0x20000050
 8001c40:	20000054 	.word	0x20000054
 8001c44:	200000b0 	.word	0x200000b0
 8001c48:	20000058 	.word	0x20000058
 8001c4c:	2000005c 	.word	0x2000005c
 8001c50:	20000060 	.word	0x20000060

08001c54 <update_set_time>:
void update_set_time() {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  ds3231_Write(ADDRESS_YEAR, temp_year);
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <update_set_time+0xb0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4619      	mov	r1, r3
 8001c60:	2006      	movs	r0, #6
 8001c62:	f7fe fce9 	bl	8000638 <ds3231_Write>
  ds3231_Write(ADDRESS_MONTH, temp_month);
 8001c66:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <update_set_time+0xb4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	2005      	movs	r0, #5
 8001c70:	f7fe fce2 	bl	8000638 <ds3231_Write>
  ds3231_Write(ADDRESS_DATE, temp_date);
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <update_set_time+0xb8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	2004      	movs	r0, #4
 8001c7e:	f7fe fcdb 	bl	8000638 <ds3231_Write>
  ds3231_Write(ADDRESS_DAY, temp_date);
 8001c82:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <update_set_time+0xb8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	4619      	mov	r1, r3
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	f7fe fcd4 	bl	8000638 <ds3231_Write>
  ds3231_Write(ADDRESS_HOUR, temp_hour);
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <update_set_time+0xbc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	4619      	mov	r1, r3
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f7fe fccd 	bl	8000638 <ds3231_Write>
  ds3231_Write(ADDRESS_MIN, temp_min);
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <update_set_time+0xc0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f7fe fcc6 	bl	8000638 <ds3231_Write>
  ds3231_Write(ADDRESS_SEC, temp_sec);
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <update_set_time+0xc4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7fe fcbf 	bl	8000638 <ds3231_Write>
  ds3231_year = temp_year;
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <update_set_time+0xb0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <update_set_time+0xc8>)
 8001cc2:	701a      	strb	r2, [r3, #0]
  ds3231_month = temp_month;
 8001cc4:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <update_set_time+0xb4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <update_set_time+0xcc>)
 8001ccc:	701a      	strb	r2, [r3, #0]
  ds3231_date = temp_date;
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <update_set_time+0xb8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <update_set_time+0xd0>)
 8001cd6:	701a      	strb	r2, [r3, #0]
  ds3231_day = temp_date;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <update_set_time+0xb8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <update_set_time+0xd4>)
 8001ce0:	701a      	strb	r2, [r3, #0]
  ds3231_hours = temp_hour;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <update_set_time+0xbc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <update_set_time+0xd8>)
 8001cea:	701a      	strb	r2, [r3, #0]
  ds3231_min = temp_min;
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <update_set_time+0xc0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <update_set_time+0xdc>)
 8001cf4:	701a      	strb	r2, [r3, #0]
  ds3231_sec = temp_sec;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <update_set_time+0xc4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <update_set_time+0xe0>)
 8001cfe:	701a      	strb	r2, [r3, #0]
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000060 	.word	0x20000060
 8001d08:	2000005c 	.word	0x2000005c
 8001d0c:	20000058 	.word	0x20000058
 8001d10:	2000004c 	.word	0x2000004c
 8001d14:	20000050 	.word	0x20000050
 8001d18:	20000054 	.word	0x20000054
 8001d1c:	200000ad 	.word	0x200000ad
 8001d20:	200000b2 	.word	0x200000b2
 8001d24:	200000af 	.word	0x200000af
 8001d28:	200000b0 	.word	0x200000b0
 8001d2c:	200000b1 	.word	0x200000b1
 8001d30:	200000ae 	.word	0x200000ae
 8001d34:	200000ac 	.word	0x200000ac

08001d38 <update_set_alarm>:
void update_set_alarm() {
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  alarm_year = temp_year;
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <update_set_alarm+0x40>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <update_set_alarm+0x44>)
 8001d42:	6013      	str	r3, [r2, #0]
  alarm_month = temp_month;
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <update_set_alarm+0x48>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <update_set_alarm+0x4c>)
 8001d4a:	6013      	str	r3, [r2, #0]
  alarm_date = temp_date;
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <update_set_alarm+0x50>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <update_set_alarm+0x54>)
 8001d52:	6013      	str	r3, [r2, #0]
  alarm_hour = temp_hour;
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <update_set_alarm+0x58>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <update_set_alarm+0x5c>)
 8001d5a:	6013      	str	r3, [r2, #0]
  alarm_min = temp_min;
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <update_set_alarm+0x60>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <update_set_alarm+0x64>)
 8001d62:	6013      	str	r3, [r2, #0]
  alarm_sec = temp_sec;
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <update_set_alarm+0x68>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <update_set_alarm+0x6c>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000060 	.word	0x20000060
 8001d7c:	20000078 	.word	0x20000078
 8001d80:	2000005c 	.word	0x2000005c
 8001d84:	20000074 	.word	0x20000074
 8001d88:	20000058 	.word	0x20000058
 8001d8c:	20000070 	.word	0x20000070
 8001d90:	2000004c 	.word	0x2000004c
 8001d94:	20000064 	.word	0x20000064
 8001d98:	20000050 	.word	0x20000050
 8001d9c:	20000068 	.word	0x20000068
 8001da0:	20000054 	.word	0x20000054
 8001da4:	2000006c 	.word	0x2000006c

08001da8 <check_alarm>:
void check_alarm() {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af02      	add	r7, sp, #8
  if (ds3231_hours == alarm_hour && ds3231_min == alarm_min && ds3231_sec == alarm_sec) {
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <check_alarm+0x48>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <check_alarm+0x4c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d116      	bne.n	8001dea <check_alarm+0x42>
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <check_alarm+0x50>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <check_alarm+0x54>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d10f      	bne.n	8001dea <check_alarm+0x42>
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <check_alarm+0x58>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <check_alarm+0x5c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d108      	bne.n	8001dea <check_alarm+0x42>
    lcd_DrawCircle(120, 60, RED, 10, 1);
 8001dd8:	2301      	movs	r3, #1
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	230a      	movs	r3, #10
 8001dde:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001de2:	213c      	movs	r1, #60	; 0x3c
 8001de4:	2078      	movs	r0, #120	; 0x78
 8001de6:	f7ff fb34 	bl	8001452 <lcd_DrawCircle>
  }
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200000b1 	.word	0x200000b1
 8001df4:	20000064 	.word	0x20000064
 8001df8:	200000ae 	.word	0x200000ae
 8001dfc:	20000068 	.word	0x20000068
 8001e00:	200000ac 	.word	0x200000ac
 8001e04:	2000006c 	.word	0x2000006c

08001e08 <set_time>:
void set_time() {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af04      	add	r7, sp, #16
  // use 2 button, 1 for increase, 1 for choose the field
  switch (set_mode) {
 8001e0e:	4b9c      	ldr	r3, [pc, #624]	; (8002080 <set_time+0x278>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	f200 81cb 	bhi.w	80021ae <set_time+0x3a6>
 8001e18:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <set_time+0x18>)
 8001e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1e:	bf00      	nop
 8001e20:	08001e3d 	.word	0x08001e3d
 8001e24:	08001eb1 	.word	0x08001eb1
 8001e28:	08001f25 	.word	0x08001f25
 8001e2c:	08001f99 	.word	0x08001f99
 8001e30:	0800200d 	.word	0x0800200d
 8001e34:	080020b5 	.word	0x080020b5
 8001e38:	08002125 	.word	0x08002125
    case 0:
      if(toggle_blink) {
 8001e3c:	4b91      	ldr	r3, [pc, #580]	; (8002084 <set_time+0x27c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00d      	beq.n	8001e60 <set_time+0x58>
        lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
 8001e44:	4b90      	ldr	r3, [pc, #576]	; (8002088 <set_time+0x280>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	2318      	movs	r3, #24
 8001e4c:	9302      	str	r3, [sp, #8]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	2300      	movs	r3, #0
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2302      	movs	r3, #2
 8001e58:	2164      	movs	r1, #100	; 0x64
 8001e5a:	2096      	movs	r0, #150	; 0x96
 8001e5c:	f7ff f86c 	bl	8000f38 <lcd_ShowIntNum>
      }
      if (button_count[3] == 1) {
 8001e60:	4b8a      	ldr	r3, [pc, #552]	; (800208c <set_time+0x284>)
 8001e62:	88db      	ldrh	r3, [r3, #6]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d10a      	bne.n	8001e7e <set_time+0x76>
        temp_sec = (temp_sec < 59) ? temp_sec + 1 : 0;
 8001e68:	4b89      	ldr	r3, [pc, #548]	; (8002090 <set_time+0x288>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b3a      	cmp	r3, #58	; 0x3a
 8001e6e:	dc03      	bgt.n	8001e78 <set_time+0x70>
 8001e70:	4b87      	ldr	r3, [pc, #540]	; (8002090 <set_time+0x288>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	e000      	b.n	8001e7a <set_time+0x72>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	4a85      	ldr	r2, [pc, #532]	; (8002090 <set_time+0x288>)
 8001e7c:	6013      	str	r3, [r2, #0]
      }
      if (button_count[3] > 40 && button_count[3] % 4 == 0) {
 8001e7e:	4b83      	ldr	r3, [pc, #524]	; (800208c <set_time+0x284>)
 8001e80:	88db      	ldrh	r3, [r3, #6]
 8001e82:	2b28      	cmp	r3, #40	; 0x28
 8001e84:	f240 8186 	bls.w	8002194 <set_time+0x38c>
 8001e88:	4b80      	ldr	r3, [pc, #512]	; (800208c <set_time+0x284>)
 8001e8a:	88db      	ldrh	r3, [r3, #6]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 817e 	bne.w	8002194 <set_time+0x38c>
        temp_sec = (temp_sec < 59) ? temp_sec + 1 : 0;
 8001e98:	4b7d      	ldr	r3, [pc, #500]	; (8002090 <set_time+0x288>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b3a      	cmp	r3, #58	; 0x3a
 8001e9e:	dc03      	bgt.n	8001ea8 <set_time+0xa0>
 8001ea0:	4b7b      	ldr	r3, [pc, #492]	; (8002090 <set_time+0x288>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	e000      	b.n	8001eaa <set_time+0xa2>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	4a79      	ldr	r2, [pc, #484]	; (8002090 <set_time+0x288>)
 8001eac:	6013      	str	r3, [r2, #0]
      }
      break;
 8001eae:	e171      	b.n	8002194 <set_time+0x38c>
    case 1:
      if(toggle_blink) {
 8001eb0:	4b74      	ldr	r3, [pc, #464]	; (8002084 <set_time+0x27c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00d      	beq.n	8001ed4 <set_time+0xcc>
        lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);
 8001eb8:	4b76      	ldr	r3, [pc, #472]	; (8002094 <set_time+0x28c>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	2318      	movs	r3, #24
 8001ec0:	9302      	str	r3, [sp, #8]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2302      	movs	r3, #2
 8001ecc:	2164      	movs	r1, #100	; 0x64
 8001ece:	206e      	movs	r0, #110	; 0x6e
 8001ed0:	f7ff f832 	bl	8000f38 <lcd_ShowIntNum>
      }
      if (button_count[3] == 1) {
 8001ed4:	4b6d      	ldr	r3, [pc, #436]	; (800208c <set_time+0x284>)
 8001ed6:	88db      	ldrh	r3, [r3, #6]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d10a      	bne.n	8001ef2 <set_time+0xea>
        temp_min = (temp_min < 59) ? temp_min + 1 : 0;
 8001edc:	4b6e      	ldr	r3, [pc, #440]	; (8002098 <set_time+0x290>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b3a      	cmp	r3, #58	; 0x3a
 8001ee2:	dc03      	bgt.n	8001eec <set_time+0xe4>
 8001ee4:	4b6c      	ldr	r3, [pc, #432]	; (8002098 <set_time+0x290>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	e000      	b.n	8001eee <set_time+0xe6>
 8001eec:	2300      	movs	r3, #0
 8001eee:	4a6a      	ldr	r2, [pc, #424]	; (8002098 <set_time+0x290>)
 8001ef0:	6013      	str	r3, [r2, #0]
      }
      if (button_count[3] > 40 && button_count[3] % 4 == 0) {
 8001ef2:	4b66      	ldr	r3, [pc, #408]	; (800208c <set_time+0x284>)
 8001ef4:	88db      	ldrh	r3, [r3, #6]
 8001ef6:	2b28      	cmp	r3, #40	; 0x28
 8001ef8:	f240 814e 	bls.w	8002198 <set_time+0x390>
 8001efc:	4b63      	ldr	r3, [pc, #396]	; (800208c <set_time+0x284>)
 8001efe:	88db      	ldrh	r3, [r3, #6]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 8146 	bne.w	8002198 <set_time+0x390>
        temp_min = (temp_min < 59) ? temp_min + 1 : 0;
 8001f0c:	4b62      	ldr	r3, [pc, #392]	; (8002098 <set_time+0x290>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b3a      	cmp	r3, #58	; 0x3a
 8001f12:	dc03      	bgt.n	8001f1c <set_time+0x114>
 8001f14:	4b60      	ldr	r3, [pc, #384]	; (8002098 <set_time+0x290>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	e000      	b.n	8001f1e <set_time+0x116>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	4a5e      	ldr	r2, [pc, #376]	; (8002098 <set_time+0x290>)
 8001f20:	6013      	str	r3, [r2, #0]
      }
      break;
 8001f22:	e139      	b.n	8002198 <set_time+0x390>
    case 2:
      if(toggle_blink) {
 8001f24:	4b57      	ldr	r3, [pc, #348]	; (8002084 <set_time+0x27c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00d      	beq.n	8001f48 <set_time+0x140>
        lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);
 8001f2c:	4b5b      	ldr	r3, [pc, #364]	; (800209c <set_time+0x294>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	2318      	movs	r3, #24
 8001f34:	9302      	str	r3, [sp, #8]
 8001f36:	2300      	movs	r3, #0
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2302      	movs	r3, #2
 8001f40:	2164      	movs	r1, #100	; 0x64
 8001f42:	2046      	movs	r0, #70	; 0x46
 8001f44:	f7fe fff8 	bl	8000f38 <lcd_ShowIntNum>
      }
      if (button_count[3] == 1) {
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <set_time+0x284>)
 8001f4a:	88db      	ldrh	r3, [r3, #6]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d10a      	bne.n	8001f66 <set_time+0x15e>
        temp_hour = (temp_hour < 23) ? temp_hour + 1 : 0;
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <set_time+0x298>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b16      	cmp	r3, #22
 8001f56:	dc03      	bgt.n	8001f60 <set_time+0x158>
 8001f58:	4b51      	ldr	r3, [pc, #324]	; (80020a0 <set_time+0x298>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	e000      	b.n	8001f62 <set_time+0x15a>
 8001f60:	2300      	movs	r3, #0
 8001f62:	4a4f      	ldr	r2, [pc, #316]	; (80020a0 <set_time+0x298>)
 8001f64:	6013      	str	r3, [r2, #0]
      }
      if (button_count[3] > 40 && button_count[3] % 4 == 0) {
 8001f66:	4b49      	ldr	r3, [pc, #292]	; (800208c <set_time+0x284>)
 8001f68:	88db      	ldrh	r3, [r3, #6]
 8001f6a:	2b28      	cmp	r3, #40	; 0x28
 8001f6c:	f240 8116 	bls.w	800219c <set_time+0x394>
 8001f70:	4b46      	ldr	r3, [pc, #280]	; (800208c <set_time+0x284>)
 8001f72:	88db      	ldrh	r3, [r3, #6]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f040 810e 	bne.w	800219c <set_time+0x394>
        temp_hour = (temp_hour < 23) ? temp_hour + 1 : 0;
 8001f80:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <set_time+0x298>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b16      	cmp	r3, #22
 8001f86:	dc03      	bgt.n	8001f90 <set_time+0x188>
 8001f88:	4b45      	ldr	r3, [pc, #276]	; (80020a0 <set_time+0x298>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	e000      	b.n	8001f92 <set_time+0x18a>
 8001f90:	2300      	movs	r3, #0
 8001f92:	4a43      	ldr	r2, [pc, #268]	; (80020a0 <set_time+0x298>)
 8001f94:	6013      	str	r3, [r2, #0]
      }
      break;
 8001f96:	e101      	b.n	800219c <set_time+0x394>
    case 3:
      if(toggle_blink) {
 8001f98:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <set_time+0x27c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00d      	beq.n	8001fbc <set_time+0x1b4>
        lcd_ShowIntNum(150, 130, ds3231_year, 2, BLACK, BLACK, 24);
 8001fa0:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <set_time+0x29c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	2318      	movs	r3, #24
 8001fa8:	9302      	str	r3, [sp, #8]
 8001faa:	2300      	movs	r3, #0
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	2182      	movs	r1, #130	; 0x82
 8001fb6:	2096      	movs	r0, #150	; 0x96
 8001fb8:	f7fe ffbe 	bl	8000f38 <lcd_ShowIntNum>
      }
      if (button_count[3] == 1) {
 8001fbc:	4b33      	ldr	r3, [pc, #204]	; (800208c <set_time+0x284>)
 8001fbe:	88db      	ldrh	r3, [r3, #6]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d10a      	bne.n	8001fda <set_time+0x1d2>
        temp_year = (temp_year < 99) ? temp_year + 1 : 0;
 8001fc4:	4b38      	ldr	r3, [pc, #224]	; (80020a8 <set_time+0x2a0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b62      	cmp	r3, #98	; 0x62
 8001fca:	dc03      	bgt.n	8001fd4 <set_time+0x1cc>
 8001fcc:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <set_time+0x2a0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <set_time+0x1ce>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	4a34      	ldr	r2, [pc, #208]	; (80020a8 <set_time+0x2a0>)
 8001fd8:	6013      	str	r3, [r2, #0]
      }
      if (button_count[3] > 40 && button_count[3] % 4 == 0) {
 8001fda:	4b2c      	ldr	r3, [pc, #176]	; (800208c <set_time+0x284>)
 8001fdc:	88db      	ldrh	r3, [r3, #6]
 8001fde:	2b28      	cmp	r3, #40	; 0x28
 8001fe0:	f240 80de 	bls.w	80021a0 <set_time+0x398>
 8001fe4:	4b29      	ldr	r3, [pc, #164]	; (800208c <set_time+0x284>)
 8001fe6:	88db      	ldrh	r3, [r3, #6]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 80d6 	bne.w	80021a0 <set_time+0x398>
        temp_year = (temp_year < 99) ? temp_year + 1 : 0;
 8001ff4:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <set_time+0x2a0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b62      	cmp	r3, #98	; 0x62
 8001ffa:	dc03      	bgt.n	8002004 <set_time+0x1fc>
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <set_time+0x2a0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	e000      	b.n	8002006 <set_time+0x1fe>
 8002004:	2300      	movs	r3, #0
 8002006:	4a28      	ldr	r2, [pc, #160]	; (80020a8 <set_time+0x2a0>)
 8002008:	6013      	str	r3, [r2, #0]
      }
      break;
 800200a:	e0c9      	b.n	80021a0 <set_time+0x398>
    case 4:
      if(toggle_blink) {
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <set_time+0x27c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00d      	beq.n	8002030 <set_time+0x228>
        lcd_ShowIntNum(110, 130, ds3231_month, 2, BLACK, BLACK, 24);
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <set_time+0x2a4>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b29a      	uxth	r2, r3
 800201a:	2318      	movs	r3, #24
 800201c:	9302      	str	r3, [sp, #8]
 800201e:	2300      	movs	r3, #0
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	2300      	movs	r3, #0
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2302      	movs	r3, #2
 8002028:	2182      	movs	r1, #130	; 0x82
 800202a:	206e      	movs	r0, #110	; 0x6e
 800202c:	f7fe ff84 	bl	8000f38 <lcd_ShowIntNum>
      }
      if (button_count[3] == 1) {
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <set_time+0x284>)
 8002032:	88db      	ldrh	r3, [r3, #6]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d10a      	bne.n	800204e <set_time+0x246>
        temp_month = (temp_month < 12) ? temp_month + 1 : 0;
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <set_time+0x2a8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b0b      	cmp	r3, #11
 800203e:	dc03      	bgt.n	8002048 <set_time+0x240>
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <set_time+0x2a8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	e000      	b.n	800204a <set_time+0x242>
 8002048:	2300      	movs	r3, #0
 800204a:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <set_time+0x2a8>)
 800204c:	6013      	str	r3, [r2, #0]
      }
      if (button_count[3] > 40 && button_count[3] % 4 == 0) {
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <set_time+0x284>)
 8002050:	88db      	ldrh	r3, [r3, #6]
 8002052:	2b28      	cmp	r3, #40	; 0x28
 8002054:	f240 80a6 	bls.w	80021a4 <set_time+0x39c>
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <set_time+0x284>)
 800205a:	88db      	ldrh	r3, [r3, #6]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 809e 	bne.w	80021a4 <set_time+0x39c>
        temp_month = (temp_month < 12) ? temp_month + 1 : 0;
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <set_time+0x2a8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b0b      	cmp	r3, #11
 800206e:	dc03      	bgt.n	8002078 <set_time+0x270>
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <set_time+0x2a8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3301      	adds	r3, #1
 8002076:	e000      	b.n	800207a <set_time+0x272>
 8002078:	2300      	movs	r3, #0
 800207a:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <set_time+0x2a8>)
 800207c:	6013      	str	r3, [r2, #0]
      }
      break;
 800207e:	e091      	b.n	80021a4 <set_time+0x39c>
 8002080:	20000048 	.word	0x20000048
 8002084:	20000040 	.word	0x20000040
 8002088:	200000ac 	.word	0x200000ac
 800208c:	2000008c 	.word	0x2000008c
 8002090:	20000054 	.word	0x20000054
 8002094:	200000ae 	.word	0x200000ae
 8002098:	20000050 	.word	0x20000050
 800209c:	200000b1 	.word	0x200000b1
 80020a0:	2000004c 	.word	0x2000004c
 80020a4:	200000ad 	.word	0x200000ad
 80020a8:	20000060 	.word	0x20000060
 80020ac:	200000b2 	.word	0x200000b2
 80020b0:	2000005c 	.word	0x2000005c
    case 5:
      if(toggle_blink) {
 80020b4:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <set_time+0x3ac>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00d      	beq.n	80020d8 <set_time+0x2d0>
        lcd_ShowIntNum(70, 130, ds3231_date, 2, BLACK, BLACK, 24);
 80020bc:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <set_time+0x3b0>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	2318      	movs	r3, #24
 80020c4:	9302      	str	r3, [sp, #8]
 80020c6:	2300      	movs	r3, #0
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	2300      	movs	r3, #0
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2302      	movs	r3, #2
 80020d0:	2182      	movs	r1, #130	; 0x82
 80020d2:	2046      	movs	r0, #70	; 0x46
 80020d4:	f7fe ff30 	bl	8000f38 <lcd_ShowIntNum>
      }
      if (button_count[3] == 1) {
 80020d8:	4b38      	ldr	r3, [pc, #224]	; (80021bc <set_time+0x3b4>)
 80020da:	88db      	ldrh	r3, [r3, #6]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d10a      	bne.n	80020f6 <set_time+0x2ee>
        temp_date = (temp_date < 31) ? temp_date + 1 : 0;
 80020e0:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <set_time+0x3b8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b1e      	cmp	r3, #30
 80020e6:	dc03      	bgt.n	80020f0 <set_time+0x2e8>
 80020e8:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <set_time+0x3b8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	e000      	b.n	80020f2 <set_time+0x2ea>
 80020f0:	2300      	movs	r3, #0
 80020f2:	4a33      	ldr	r2, [pc, #204]	; (80021c0 <set_time+0x3b8>)
 80020f4:	6013      	str	r3, [r2, #0]
      }
      if (button_count[3] > 40 && button_count[3] % 4 == 0) {
 80020f6:	4b31      	ldr	r3, [pc, #196]	; (80021bc <set_time+0x3b4>)
 80020f8:	88db      	ldrh	r3, [r3, #6]
 80020fa:	2b28      	cmp	r3, #40	; 0x28
 80020fc:	d954      	bls.n	80021a8 <set_time+0x3a0>
 80020fe:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <set_time+0x3b4>)
 8002100:	88db      	ldrh	r3, [r3, #6]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d14d      	bne.n	80021a8 <set_time+0x3a0>
        temp_date = (temp_date < 31) ? temp_date + 1 : 0;
 800210c:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <set_time+0x3b8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b1e      	cmp	r3, #30
 8002112:	dc03      	bgt.n	800211c <set_time+0x314>
 8002114:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <set_time+0x3b8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	e000      	b.n	800211e <set_time+0x316>
 800211c:	2300      	movs	r3, #0
 800211e:	4a28      	ldr	r2, [pc, #160]	; (80021c0 <set_time+0x3b8>)
 8002120:	6013      	str	r3, [r2, #0]
      }
      break;
 8002122:	e041      	b.n	80021a8 <set_time+0x3a0>
    case 6:
      if(toggle_blink) {
 8002124:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <set_time+0x3ac>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00d      	beq.n	8002148 <set_time+0x340>
        lcd_ShowIntNum(20, 130, ds3231_day, 2, BLACK, BLACK, 24);
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <set_time+0x3bc>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b29a      	uxth	r2, r3
 8002132:	2318      	movs	r3, #24
 8002134:	9302      	str	r3, [sp, #8]
 8002136:	2300      	movs	r3, #0
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	2300      	movs	r3, #0
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2302      	movs	r3, #2
 8002140:	2182      	movs	r1, #130	; 0x82
 8002142:	2014      	movs	r0, #20
 8002144:	f7fe fef8 	bl	8000f38 <lcd_ShowIntNum>
      }
      if (button_count[3] == 1) {
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <set_time+0x3b4>)
 800214a:	88db      	ldrh	r3, [r3, #6]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10a      	bne.n	8002166 <set_time+0x35e>
        temp_date = (temp_date < 7) ? temp_date + 1 : 0;
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <set_time+0x3b8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b06      	cmp	r3, #6
 8002156:	dc03      	bgt.n	8002160 <set_time+0x358>
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <set_time+0x3b8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	e000      	b.n	8002162 <set_time+0x35a>
 8002160:	2300      	movs	r3, #0
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <set_time+0x3b8>)
 8002164:	6013      	str	r3, [r2, #0]
      }
      if (button_count[3] > 40 && button_count[3] % 4 == 0) {
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <set_time+0x3b4>)
 8002168:	88db      	ldrh	r3, [r3, #6]
 800216a:	2b28      	cmp	r3, #40	; 0x28
 800216c:	d91e      	bls.n	80021ac <set_time+0x3a4>
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <set_time+0x3b4>)
 8002170:	88db      	ldrh	r3, [r3, #6]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d117      	bne.n	80021ac <set_time+0x3a4>
        temp_date = (temp_date < 7) ? temp_date + 1 : 0;
 800217c:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <set_time+0x3b8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b06      	cmp	r3, #6
 8002182:	dc03      	bgt.n	800218c <set_time+0x384>
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <set_time+0x3b8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	e000      	b.n	800218e <set_time+0x386>
 800218c:	2300      	movs	r3, #0
 800218e:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <set_time+0x3b8>)
 8002190:	6013      	str	r3, [r2, #0]
      }
      break;
 8002192:	e00b      	b.n	80021ac <set_time+0x3a4>
      break;
 8002194:	bf00      	nop
 8002196:	e00a      	b.n	80021ae <set_time+0x3a6>
      break;
 8002198:	bf00      	nop
 800219a:	e008      	b.n	80021ae <set_time+0x3a6>
      break;
 800219c:	bf00      	nop
 800219e:	e006      	b.n	80021ae <set_time+0x3a6>
      break;
 80021a0:	bf00      	nop
 80021a2:	e004      	b.n	80021ae <set_time+0x3a6>
      break;
 80021a4:	bf00      	nop
 80021a6:	e002      	b.n	80021ae <set_time+0x3a6>
      break;
 80021a8:	bf00      	nop
 80021aa:	e000      	b.n	80021ae <set_time+0x3a6>
      break;
 80021ac:	bf00      	nop
  }
  
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000040 	.word	0x20000040
 80021b8:	200000af 	.word	0x200000af
 80021bc:	2000008c 	.word	0x2000008c
 80021c0:	20000058 	.word	0x20000058
 80021c4:	200000b0 	.word	0x200000b0

080021c8 <my_clock>:
void my_clock() {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af04      	add	r7, sp, #16
	static int start = 0;
	if (start == 0) {
 80021ce:	4b6a      	ldr	r3, [pc, #424]	; (8002378 <my_clock+0x1b0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d13e      	bne.n	8002254 <my_clock+0x8c>
		temp_sec = ds3231_sec;
 80021d6:	4b69      	ldr	r3, [pc, #420]	; (800237c <my_clock+0x1b4>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	4b68      	ldr	r3, [pc, #416]	; (8002380 <my_clock+0x1b8>)
 80021de:	601a      	str	r2, [r3, #0]
		  temp_min = ds3231_min;
 80021e0:	4b68      	ldr	r3, [pc, #416]	; (8002384 <my_clock+0x1bc>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b68      	ldr	r3, [pc, #416]	; (8002388 <my_clock+0x1c0>)
 80021e8:	601a      	str	r2, [r3, #0]
		  temp_hour = ds3231_hours;
 80021ea:	4b68      	ldr	r3, [pc, #416]	; (800238c <my_clock+0x1c4>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b67      	ldr	r3, [pc, #412]	; (8002390 <my_clock+0x1c8>)
 80021f2:	601a      	str	r2, [r3, #0]
		  temp_date = ds3231_date;
 80021f4:	4b67      	ldr	r3, [pc, #412]	; (8002394 <my_clock+0x1cc>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b67      	ldr	r3, [pc, #412]	; (8002398 <my_clock+0x1d0>)
 80021fc:	601a      	str	r2, [r3, #0]
		  temp_month = ds3231_month;
 80021fe:	4b67      	ldr	r3, [pc, #412]	; (800239c <my_clock+0x1d4>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	4b66      	ldr	r3, [pc, #408]	; (80023a0 <my_clock+0x1d8>)
 8002206:	601a      	str	r2, [r3, #0]
		  temp_year = ds3231_year;
 8002208:	4b66      	ldr	r3, [pc, #408]	; (80023a4 <my_clock+0x1dc>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4b66      	ldr	r3, [pc, #408]	; (80023a8 <my_clock+0x1e0>)
 8002210:	601a      	str	r2, [r3, #0]
		  alarm_hour = ds3231_hours;
 8002212:	4b5e      	ldr	r3, [pc, #376]	; (800238c <my_clock+0x1c4>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	4b64      	ldr	r3, [pc, #400]	; (80023ac <my_clock+0x1e4>)
 800221a:	601a      	str	r2, [r3, #0]
		  alarm_min = ds3231_min;
 800221c:	4b59      	ldr	r3, [pc, #356]	; (8002384 <my_clock+0x1bc>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <my_clock+0x1e8>)
 8002224:	601a      	str	r2, [r3, #0]
		  alarm_sec = ds3231_sec;
 8002226:	4b55      	ldr	r3, [pc, #340]	; (800237c <my_clock+0x1b4>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	4b61      	ldr	r3, [pc, #388]	; (80023b4 <my_clock+0x1ec>)
 800222e:	601a      	str	r2, [r3, #0]
		  alarm_date = ds3231_date;
 8002230:	4b58      	ldr	r3, [pc, #352]	; (8002394 <my_clock+0x1cc>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	4b60      	ldr	r3, [pc, #384]	; (80023b8 <my_clock+0x1f0>)
 8002238:	601a      	str	r2, [r3, #0]
		  alarm_month = ds3231_month;
 800223a:	4b58      	ldr	r3, [pc, #352]	; (800239c <my_clock+0x1d4>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	4b5e      	ldr	r3, [pc, #376]	; (80023bc <my_clock+0x1f4>)
 8002242:	601a      	str	r2, [r3, #0]
		  alarm_year = ds3231_year;
 8002244:	4b57      	ldr	r3, [pc, #348]	; (80023a4 <my_clock+0x1dc>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <my_clock+0x1f8>)
 800224c:	601a      	str	r2, [r3, #0]
		  start = 2;
 800224e:	4b4a      	ldr	r3, [pc, #296]	; (8002378 <my_clock+0x1b0>)
 8002250:	2202      	movs	r2, #2
 8002252:	601a      	str	r2, [r3, #0]
	}
  if (button_count[0] == 1) {
 8002254:	4b5b      	ldr	r3, [pc, #364]	; (80023c4 <my_clock+0x1fc>)
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d10a      	bne.n	8002272 <my_clock+0xaa>
    mode = (mode < 2) ? mode + 1 : 0;
 800225c:	4b5a      	ldr	r3, [pc, #360]	; (80023c8 <my_clock+0x200>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b01      	cmp	r3, #1
 8002262:	dc03      	bgt.n	800226c <my_clock+0xa4>
 8002264:	4b58      	ldr	r3, [pc, #352]	; (80023c8 <my_clock+0x200>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	e000      	b.n	800226e <my_clock+0xa6>
 800226c:	2300      	movs	r3, #0
 800226e:	4a56      	ldr	r2, [pc, #344]	; (80023c8 <my_clock+0x200>)
 8002270:	6013      	str	r3, [r2, #0]
  }
  if (button_count[1] == 1) {
 8002272:	4b54      	ldr	r3, [pc, #336]	; (80023c4 <my_clock+0x1fc>)
 8002274:	885b      	ldrh	r3, [r3, #2]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d135      	bne.n	80022e6 <my_clock+0x11e>
    if (mode == SET_TIME) {
 800227a:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <my_clock+0x200>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d102      	bne.n	8002288 <my_clock+0xc0>
      update_set_time();
 8002282:	f7ff fce7 	bl	8001c54 <update_set_time>
 8002286:	e005      	b.n	8002294 <my_clock+0xcc>
    } else if (mode == SET_ALARM) {
 8002288:	4b4f      	ldr	r3, [pc, #316]	; (80023c8 <my_clock+0x200>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d101      	bne.n	8002294 <my_clock+0xcc>
      update_set_alarm();
 8002290:	f7ff fd52 	bl	8001d38 <update_set_alarm>
    }
    set_mode = (set_mode < 6) ? set_mode + 1 : 0;
 8002294:	4b4d      	ldr	r3, [pc, #308]	; (80023cc <my_clock+0x204>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b05      	cmp	r3, #5
 800229a:	dc03      	bgt.n	80022a4 <my_clock+0xdc>
 800229c:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <my_clock+0x204>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	e000      	b.n	80022a6 <my_clock+0xde>
 80022a4:	2300      	movs	r3, #0
 80022a6:	4a49      	ldr	r2, [pc, #292]	; (80023cc <my_clock+0x204>)
 80022a8:	6013      	str	r3, [r2, #0]
    temp_hour = ds3231_hours;
 80022aa:	4b38      	ldr	r3, [pc, #224]	; (800238c <my_clock+0x1c4>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	4b37      	ldr	r3, [pc, #220]	; (8002390 <my_clock+0x1c8>)
 80022b2:	601a      	str	r2, [r3, #0]
    temp_min = ds3231_min;
 80022b4:	4b33      	ldr	r3, [pc, #204]	; (8002384 <my_clock+0x1bc>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b33      	ldr	r3, [pc, #204]	; (8002388 <my_clock+0x1c0>)
 80022bc:	601a      	str	r2, [r3, #0]
    temp_sec = ds3231_sec;
 80022be:	4b2f      	ldr	r3, [pc, #188]	; (800237c <my_clock+0x1b4>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <my_clock+0x1b8>)
 80022c6:	601a      	str	r2, [r3, #0]
    temp_date = ds3231_date;
 80022c8:	4b32      	ldr	r3, [pc, #200]	; (8002394 <my_clock+0x1cc>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b32      	ldr	r3, [pc, #200]	; (8002398 <my_clock+0x1d0>)
 80022d0:	601a      	str	r2, [r3, #0]
    temp_month = ds3231_month;
 80022d2:	4b32      	ldr	r3, [pc, #200]	; (800239c <my_clock+0x1d4>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <my_clock+0x1d8>)
 80022da:	601a      	str	r2, [r3, #0]
    temp_year = ds3231_year;
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <my_clock+0x1dc>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <my_clock+0x1e0>)
 80022e4:	601a      	str	r2, [r3, #0]
  }
  switch (mode) {
 80022e6:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <my_clock+0x200>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d02e      	beq.n	800234c <my_clock+0x184>
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	dc3f      	bgt.n	8002372 <my_clock+0x1aa>
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <my_clock+0x134>
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d015      	beq.n	8002326 <my_clock+0x15e>
      display_temp_clock();
      set_time();
      lcd_ShowStr(20, 30, "SET ALARM MODE", WHITE, RED, 24, 0);
      break;
  }
}
 80022fa:	e03a      	b.n	8002372 <my_clock+0x1aa>
      normal_clock();
 80022fc:	f7ff fad2 	bl	80018a4 <normal_clock>
      check_alarm();
 8002300:	f7ff fd52 	bl	8001da8 <check_alarm>
      display_clock();
 8002304:	f7ff fbaa 	bl	8001a5c <display_clock>
      lcd_ShowStr(20, 30, "NORMAL MODE", WHITE, RED, 24, 0);
 8002308:	2300      	movs	r3, #0
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	2318      	movs	r3, #24
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800231a:	4a2d      	ldr	r2, [pc, #180]	; (80023d0 <my_clock+0x208>)
 800231c:	211e      	movs	r1, #30
 800231e:	2014      	movs	r0, #20
 8002320:	f7ff f904 	bl	800152c <lcd_ShowStr>
      break;
 8002324:	e025      	b.n	8002372 <my_clock+0x1aa>
      display_temp_clock();
 8002326:	f7ff fc17 	bl	8001b58 <display_temp_clock>
      set_time();
 800232a:	f7ff fd6d 	bl	8001e08 <set_time>
      lcd_ShowStr(20, 30, "SET TIME MODE", WHITE, RED, 24, 0);
 800232e:	2300      	movs	r3, #0
 8002330:	9302      	str	r3, [sp, #8]
 8002332:	2318      	movs	r3, #24
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002340:	4a24      	ldr	r2, [pc, #144]	; (80023d4 <my_clock+0x20c>)
 8002342:	211e      	movs	r1, #30
 8002344:	2014      	movs	r0, #20
 8002346:	f7ff f8f1 	bl	800152c <lcd_ShowStr>
      break;
 800234a:	e012      	b.n	8002372 <my_clock+0x1aa>
      display_temp_clock();
 800234c:	f7ff fc04 	bl	8001b58 <display_temp_clock>
      set_time();
 8002350:	f7ff fd5a 	bl	8001e08 <set_time>
      lcd_ShowStr(20, 30, "SET ALARM MODE", WHITE, RED, 24, 0);
 8002354:	2300      	movs	r3, #0
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	2318      	movs	r3, #24
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002366:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <my_clock+0x210>)
 8002368:	211e      	movs	r1, #30
 800236a:	2014      	movs	r0, #20
 800236c:	f7ff f8de 	bl	800152c <lcd_ShowStr>
      break;
 8002370:	bf00      	nop
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000080 	.word	0x20000080
 800237c:	200000ac 	.word	0x200000ac
 8002380:	20000054 	.word	0x20000054
 8002384:	200000ae 	.word	0x200000ae
 8002388:	20000050 	.word	0x20000050
 800238c:	200000b1 	.word	0x200000b1
 8002390:	2000004c 	.word	0x2000004c
 8002394:	200000af 	.word	0x200000af
 8002398:	20000058 	.word	0x20000058
 800239c:	200000b2 	.word	0x200000b2
 80023a0:	2000005c 	.word	0x2000005c
 80023a4:	200000ad 	.word	0x200000ad
 80023a8:	20000060 	.word	0x20000060
 80023ac:	20000064 	.word	0x20000064
 80023b0:	20000068 	.word	0x20000068
 80023b4:	2000006c 	.word	0x2000006c
 80023b8:	20000070 	.word	0x20000070
 80023bc:	20000074 	.word	0x20000074
 80023c0:	20000078 	.word	0x20000078
 80023c4:	2000008c 	.word	0x2000008c
 80023c8:	2000003c 	.word	0x2000003c
 80023cc:	20000048 	.word	0x20000048
 80023d0:	08007294 	.word	0x08007294
 80023d4:	080072a0 	.word	0x080072a0
 80023d8:	080072b0 	.word	0x080072b0

080023dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e0:	b672      	cpsid	i
}
 80023e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <Error_Handler+0x8>
	...

080023e8 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <timer_init+0x10>)
 80023ee:	f003 fa4f 	bl	8005890 <HAL_TIM_Base_Start_IT>
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200001f4 	.word	0x200001f4

080023fc <setTimer2>:

void setTimer2(uint16_t duration){
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002406:	4a08      	ldr	r2, [pc, #32]	; (8002428 <setTimer2+0x2c>)
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <setTimer2+0x2c>)
 800240e:	881a      	ldrh	r2, [r3, #0]
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <setTimer2+0x30>)
 8002412:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <setTimer2+0x34>)
 8002416:	2200      	movs	r2, #0
 8002418:	801a      	strh	r2, [r3, #0]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20000088 	.word	0x20000088
 800242c:	20000086 	.word	0x20000086
 8002430:	20000084 	.word	0x20000084

08002434 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002444:	d116      	bne.n	8002474 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002446:	4b0d      	ldr	r3, [pc, #52]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d010      	beq.n	8002470 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	3b01      	subs	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002458:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002464:	2201      	movs	r2, #1
 8002466:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800246a:	881a      	ldrh	r2, [r3, #0]
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800246e:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002470:	f7ff f8cc 	bl	800160c <led7_Scan>
	}
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000086 	.word	0x20000086
 8002480:	20000084 	.word	0x20000084
 8002484:	20000088 	.word	0x20000088

08002488 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800248c:	4b17      	ldr	r3, [pc, #92]	; (80024ec <MX_SPI1_Init+0x64>)
 800248e:	4a18      	ldr	r2, [pc, #96]	; (80024f0 <MX_SPI1_Init+0x68>)
 8002490:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002492:	4b16      	ldr	r3, [pc, #88]	; (80024ec <MX_SPI1_Init+0x64>)
 8002494:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002498:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <MX_SPI1_Init+0x64>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <MX_SPI1_Init+0x64>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <MX_SPI1_Init+0x64>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <MX_SPI1_Init+0x64>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <MX_SPI1_Init+0x64>)
 80024b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <MX_SPI1_Init+0x64>)
 80024bc:	2200      	movs	r2, #0
 80024be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <MX_SPI1_Init+0x64>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <MX_SPI1_Init+0x64>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <MX_SPI1_Init+0x64>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <MX_SPI1_Init+0x64>)
 80024d4:	220a      	movs	r2, #10
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024d8:	4804      	ldr	r0, [pc, #16]	; (80024ec <MX_SPI1_Init+0x64>)
 80024da:	f002 fb9d 	bl	8004c18 <HAL_SPI_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024e4:	f7ff ff7a 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	2000019c 	.word	0x2000019c
 80024f0:	40013000 	.word	0x40013000

080024f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a19      	ldr	r2, [pc, #100]	; (8002578 <HAL_SPI_MspInit+0x84>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d12b      	bne.n	800256e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <HAL_SPI_MspInit+0x88>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	4a17      	ldr	r2, [pc, #92]	; (800257c <HAL_SPI_MspInit+0x88>)
 8002520:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002524:	6453      	str	r3, [r2, #68]	; 0x44
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <HAL_SPI_MspInit+0x88>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_SPI_MspInit+0x88>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a10      	ldr	r2, [pc, #64]	; (800257c <HAL_SPI_MspInit+0x88>)
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_SPI_MspInit+0x88>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800254e:	2338      	movs	r3, #56	; 0x38
 8002550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800255e:	2305      	movs	r3, #5
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	4805      	ldr	r0, [pc, #20]	; (8002580 <HAL_SPI_MspInit+0x8c>)
 800256a:	f000 fc3d 	bl	8002de8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800256e:	bf00      	nop
 8002570:	3728      	adds	r7, #40	; 0x28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40013000 	.word	0x40013000
 800257c:	40023800 	.word	0x40023800
 8002580:	40020400 	.word	0x40020400

08002584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_MspInit+0x4c>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <HAL_MspInit+0x4c>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_MspInit+0x4c>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_MspInit+0x4c>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <HAL_MspInit+0x4c>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_MspInit+0x4c>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800

080025d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <NMI_Handler+0x4>

080025da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025de:	e7fe      	b.n	80025de <HardFault_Handler+0x4>

080025e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <MemManage_Handler+0x4>

080025e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ea:	e7fe      	b.n	80025ea <BusFault_Handler+0x4>

080025ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <UsageFault_Handler+0x4>

080025f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002620:	f000 f9fa 	bl	8002a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}

08002628 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <TIM2_IRQHandler+0x10>)
 800262e:	f003 f99f 	bl	8005970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200001f4 	.word	0x200001f4

0800263c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <USART1_IRQHandler+0x10>)
 8002642:	f003 fe67 	bl	8006314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000023c 	.word	0x2000023c

08002650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <SystemInit+0x20>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	4a05      	ldr	r2, [pc, #20]	; (8002670 <SystemInit+0x20>)
 800265c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002688:	463b      	mov	r3, r7
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <MX_TIM2_Init+0x94>)
 8002692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002696:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <MX_TIM2_Init+0x94>)
 800269a:	f240 3247 	movw	r2, #839	; 0x347
 800269e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <MX_TIM2_Init+0x94>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80026a6:	4b18      	ldr	r3, [pc, #96]	; (8002708 <MX_TIM2_Init+0x94>)
 80026a8:	2263      	movs	r2, #99	; 0x63
 80026aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <MX_TIM2_Init+0x94>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <MX_TIM2_Init+0x94>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026b8:	4813      	ldr	r0, [pc, #76]	; (8002708 <MX_TIM2_Init+0x94>)
 80026ba:	f003 f899 	bl	80057f0 <HAL_TIM_Base_Init>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80026c4:	f7ff fe8a 	bl	80023dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	4619      	mov	r1, r3
 80026d4:	480c      	ldr	r0, [pc, #48]	; (8002708 <MX_TIM2_Init+0x94>)
 80026d6:	f003 fa53 	bl	8005b80 <HAL_TIM_ConfigClockSource>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80026e0:	f7ff fe7c 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026ec:	463b      	mov	r3, r7
 80026ee:	4619      	mov	r1, r3
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <MX_TIM2_Init+0x94>)
 80026f2:	f003 fc6f 	bl	8005fd4 <HAL_TIMEx_MasterConfigSynchronization>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80026fc:	f7ff fe6e 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002700:	bf00      	nop
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200001f4 	.word	0x200001f4

0800270c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271c:	d115      	bne.n	800274a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_TIM_Base_MspInit+0x48>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a0b      	ldr	r2, [pc, #44]	; (8002754 <HAL_TIM_Base_MspInit+0x48>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_TIM_Base_MspInit+0x48>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	201c      	movs	r0, #28
 8002740:	f000 fa89 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002744:	201c      	movs	r0, #28
 8002746:	f000 faa2 	bl	8002c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800

08002758 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800275c:	2201      	movs	r2, #1
 800275e:	4903      	ldr	r1, [pc, #12]	; (800276c <uart_init_rs232+0x14>)
 8002760:	4803      	ldr	r0, [pc, #12]	; (8002770 <uart_init_rs232+0x18>)
 8002762:	f003 fda6 	bl	80062b2 <HAL_UART_Receive_IT>
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	2000008a 	.word	0x2000008a
 8002770:	2000023c 	.word	0x2000023c

08002774 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <HAL_UART_RxCpltCallback+0x30>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10a      	bne.n	800279c <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002786:	230a      	movs	r3, #10
 8002788:	2201      	movs	r2, #1
 800278a:	4907      	ldr	r1, [pc, #28]	; (80027a8 <HAL_UART_RxCpltCallback+0x34>)
 800278c:	4807      	ldr	r0, [pc, #28]	; (80027ac <HAL_UART_RxCpltCallback+0x38>)
 800278e:	f003 fcfe 	bl	800618e <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002792:	2201      	movs	r2, #1
 8002794:	4904      	ldr	r1, [pc, #16]	; (80027a8 <HAL_UART_RxCpltCallback+0x34>)
 8002796:	4805      	ldr	r0, [pc, #20]	; (80027ac <HAL_UART_RxCpltCallback+0x38>)
 8002798:	f003 fd8b 	bl	80062b2 <HAL_UART_Receive_IT>
	}
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40011000 	.word	0x40011000
 80027a8:	2000008a 	.word	0x2000008a
 80027ac:	2000023c 	.word	0x2000023c

080027b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <MX_USART1_UART_Init+0x50>)
 80027b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027d6:	220c      	movs	r2, #12
 80027d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027e6:	4805      	ldr	r0, [pc, #20]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027e8:	f003 fc84 	bl	80060f4 <HAL_UART_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027f2:	f7ff fdf3 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	2000023c 	.word	0x2000023c
 8002800:	40011000 	.word	0x40011000

08002804 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <HAL_UART_MspInit+0x94>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d134      	bne.n	8002890 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <HAL_UART_MspInit+0x98>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	4a1b      	ldr	r2, [pc, #108]	; (800289c <HAL_UART_MspInit+0x98>)
 8002830:	f043 0310 	orr.w	r3, r3, #16
 8002834:	6453      	str	r3, [r2, #68]	; 0x44
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_UART_MspInit+0x98>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_UART_MspInit+0x98>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a14      	ldr	r2, [pc, #80]	; (800289c <HAL_UART_MspInit+0x98>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_UART_MspInit+0x98>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800285e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286c:	2303      	movs	r3, #3
 800286e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002870:	2307      	movs	r3, #7
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4619      	mov	r1, r3
 800287a:	4809      	ldr	r0, [pc, #36]	; (80028a0 <HAL_UART_MspInit+0x9c>)
 800287c:	f000 fab4 	bl	8002de8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2100      	movs	r1, #0
 8002884:	2025      	movs	r0, #37	; 0x25
 8002886:	f000 f9e6 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800288a:	2025      	movs	r0, #37	; 0x25
 800288c:	f000 f9ff 	bl	8002c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002890:	bf00      	nop
 8002892:	3728      	adds	r7, #40	; 0x28
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40011000 	.word	0x40011000
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020000 	.word	0x40020000

080028a4 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	0092      	lsls	r2, r2, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	b2db      	uxtb	r3, r3
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	4a0d      	ldr	r2, [pc, #52]	; (800291c <DEC2BCD+0x44>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	08db      	lsrs	r3, r3, #3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	b258      	sxtb	r0, r3
 80028f2:	79fa      	ldrb	r2, [r7, #7]
 80028f4:	4b09      	ldr	r3, [pc, #36]	; (800291c <DEC2BCD+0x44>)
 80028f6:	fba3 1302 	umull	r1, r3, r3, r2
 80028fa:	08d9      	lsrs	r1, r3, #3
 80028fc:	460b      	mov	r3, r1
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	b25b      	sxtb	r3, r3
 800290a:	4303      	orrs	r3, r0
 800290c:	b25b      	sxtb	r3, r3
 800290e:	b2db      	uxtb	r3, r3
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	cccccccd 	.word	0xcccccccd

08002920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002958 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002924:	480d      	ldr	r0, [pc, #52]	; (800295c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002926:	490e      	ldr	r1, [pc, #56]	; (8002960 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002928:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800292a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800292c:	e002      	b.n	8002934 <LoopCopyDataInit>

0800292e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002932:	3304      	adds	r3, #4

08002934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002938:	d3f9      	bcc.n	800292e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293a:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800293c:	4c0b      	ldr	r4, [pc, #44]	; (800296c <LoopFillZerobss+0x26>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002940:	e001      	b.n	8002946 <LoopFillZerobss>

08002942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002944:	3204      	adds	r2, #4

08002946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002948:	d3fb      	bcc.n	8002942 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800294a:	f7ff fe81 	bl	8002650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800294e:	f004 fc69 	bl	8007224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002952:	f7fe fee7 	bl	8001724 <main>
  bx  lr    
 8002956:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800295c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002960:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002964:	0800a268 	.word	0x0800a268
  ldr r2, =_sbss
 8002968:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800296c:	20000284 	.word	0x20000284

08002970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002970:	e7fe      	b.n	8002970 <ADC_IRQHandler>
	...

08002974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002978:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_Init+0x40>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0d      	ldr	r2, [pc, #52]	; (80029b4 <HAL_Init+0x40>)
 800297e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <HAL_Init+0x40>)
 800298a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_Init+0x40>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <HAL_Init+0x40>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299c:	2003      	movs	r0, #3
 800299e:	f000 f94f 	bl	8002c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029a2:	200f      	movs	r0, #15
 80029a4:	f000 f808 	bl	80029b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a8:	f7ff fdec 	bl	8002584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023c00 	.word	0x40023c00

080029b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_InitTick+0x54>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_InitTick+0x58>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	4619      	mov	r1, r3
 80029ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f967 	bl	8002caa <HAL_SYSTICK_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00e      	b.n	8002a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b0f      	cmp	r3, #15
 80029ea:	d80a      	bhi.n	8002a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ec:	2200      	movs	r2, #0
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f000 f92f 	bl	8002c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f8:	4a06      	ldr	r2, [pc, #24]	; (8002a14 <HAL_InitTick+0x5c>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000008 	.word	0x20000008
 8002a10:	20000010 	.word	0x20000010
 8002a14:	2000000c 	.word	0x2000000c

08002a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_IncTick+0x20>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_IncTick+0x24>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <HAL_IncTick+0x24>)
 8002a2a:	6013      	str	r3, [r2, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000010 	.word	0x20000010
 8002a3c:	20000280 	.word	0x20000280

08002a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return uwTick;
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <HAL_GetTick+0x14>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000280 	.word	0x20000280

08002a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a60:	f7ff ffee 	bl	8002a40 <HAL_GetTick>
 8002a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d005      	beq.n	8002a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_Delay+0x44>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a7e:	bf00      	nop
 8002a80:	f7ff ffde 	bl	8002a40 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d8f7      	bhi.n	8002a80 <HAL_Delay+0x28>
  {
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000010 	.word	0x20000010

08002aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002abc:	4013      	ands	r3, r2
 8002abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad2:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	60d3      	str	r3, [r2, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <__NVIC_GetPriorityGrouping+0x18>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	f003 0307 	and.w	r3, r3, #7
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	db0b      	blt.n	8002b2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	f003 021f 	and.w	r2, r3, #31
 8002b1c:	4907      	ldr	r1, [pc, #28]	; (8002b3c <__NVIC_EnableIRQ+0x38>)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	2001      	movs	r0, #1
 8002b26:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000e100 	.word	0xe000e100

08002b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	db0a      	blt.n	8002b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	490c      	ldr	r1, [pc, #48]	; (8002b8c <__NVIC_SetPriority+0x4c>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	440b      	add	r3, r1
 8002b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b68:	e00a      	b.n	8002b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4908      	ldr	r1, [pc, #32]	; (8002b90 <__NVIC_SetPriority+0x50>)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	3b04      	subs	r3, #4
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	761a      	strb	r2, [r3, #24]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000e100 	.word	0xe000e100
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f1c3 0307 	rsb	r3, r3, #7
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	bf28      	it	cs
 8002bb2:	2304      	movcs	r3, #4
 8002bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d902      	bls.n	8002bc4 <NVIC_EncodePriority+0x30>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3b03      	subs	r3, #3
 8002bc2:	e000      	b.n	8002bc6 <NVIC_EncodePriority+0x32>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	43d9      	mvns	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	4313      	orrs	r3, r2
         );
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3724      	adds	r7, #36	; 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c0c:	d301      	bcc.n	8002c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e00f      	b.n	8002c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <SysTick_Config+0x40>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c20:	f7ff ff8e 	bl	8002b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <SysTick_Config+0x40>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2a:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <SysTick_Config+0x40>)
 8002c2c:	2207      	movs	r2, #7
 8002c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	e000e010 	.word	0xe000e010

08002c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ff29 	bl	8002aa0 <__NVIC_SetPriorityGrouping>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c68:	f7ff ff3e 	bl	8002ae8 <__NVIC_GetPriorityGrouping>
 8002c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	6978      	ldr	r0, [r7, #20]
 8002c74:	f7ff ff8e 	bl	8002b94 <NVIC_EncodePriority>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff5d 	bl	8002b40 <__NVIC_SetPriority>
}
 8002c86:	bf00      	nop
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff31 	bl	8002b04 <__NVIC_EnableIRQ>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ffa2 	bl	8002bfc <SysTick_Config>
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7ff feb6 	bl	8002a40 <HAL_GetTick>
 8002cd4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d008      	beq.n	8002cf4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2280      	movs	r2, #128	; 0x80
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e052      	b.n	8002d9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0216 	bic.w	r2, r2, #22
 8002d02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d103      	bne.n	8002d24 <HAL_DMA_Abort+0x62>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0208 	bic.w	r2, r2, #8
 8002d32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d44:	e013      	b.n	8002d6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d46:	f7ff fe7b 	bl	8002a40 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b05      	cmp	r3, #5
 8002d52:	d90c      	bls.n	8002d6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e015      	b.n	8002d9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e4      	bne.n	8002d46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	223f      	movs	r2, #63	; 0x3f
 8002d82:	409a      	lsls	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d004      	beq.n	8002dc0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2280      	movs	r2, #128	; 0x80
 8002dba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e00c      	b.n	8002dda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2205      	movs	r2, #5
 8002dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	e16b      	b.n	80030dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e04:	2201      	movs	r2, #1
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	f040 815a 	bne.w	80030d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d005      	beq.n	8002e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d130      	bne.n	8002e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e70:	2201      	movs	r2, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 0201 	and.w	r2, r3, #1
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d017      	beq.n	8002ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d123      	bne.n	8002f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	08da      	lsrs	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3208      	adds	r2, #8
 8002eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	220f      	movs	r2, #15
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	08da      	lsrs	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3208      	adds	r2, #8
 8002f26:	69b9      	ldr	r1, [r7, #24]
 8002f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	2203      	movs	r2, #3
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0203 	and.w	r2, r3, #3
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80b4 	beq.w	80030d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b60      	ldr	r3, [pc, #384]	; (80030f4 <HAL_GPIO_Init+0x30c>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	4a5f      	ldr	r2, [pc, #380]	; (80030f4 <HAL_GPIO_Init+0x30c>)
 8002f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7e:	4b5d      	ldr	r3, [pc, #372]	; (80030f4 <HAL_GPIO_Init+0x30c>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f8a:	4a5b      	ldr	r2, [pc, #364]	; (80030f8 <HAL_GPIO_Init+0x310>)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	3302      	adds	r3, #2
 8002f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	220f      	movs	r2, #15
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	; (80030fc <HAL_GPIO_Init+0x314>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02b      	beq.n	800300e <HAL_GPIO_Init+0x226>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a51      	ldr	r2, [pc, #324]	; (8003100 <HAL_GPIO_Init+0x318>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d025      	beq.n	800300a <HAL_GPIO_Init+0x222>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a50      	ldr	r2, [pc, #320]	; (8003104 <HAL_GPIO_Init+0x31c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01f      	beq.n	8003006 <HAL_GPIO_Init+0x21e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a4f      	ldr	r2, [pc, #316]	; (8003108 <HAL_GPIO_Init+0x320>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d019      	beq.n	8003002 <HAL_GPIO_Init+0x21a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a4e      	ldr	r2, [pc, #312]	; (800310c <HAL_GPIO_Init+0x324>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <HAL_GPIO_Init+0x216>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a4d      	ldr	r2, [pc, #308]	; (8003110 <HAL_GPIO_Init+0x328>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00d      	beq.n	8002ffa <HAL_GPIO_Init+0x212>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a4c      	ldr	r2, [pc, #304]	; (8003114 <HAL_GPIO_Init+0x32c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d007      	beq.n	8002ff6 <HAL_GPIO_Init+0x20e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a4b      	ldr	r2, [pc, #300]	; (8003118 <HAL_GPIO_Init+0x330>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_GPIO_Init+0x20a>
 8002fee:	2307      	movs	r3, #7
 8002ff0:	e00e      	b.n	8003010 <HAL_GPIO_Init+0x228>
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	e00c      	b.n	8003010 <HAL_GPIO_Init+0x228>
 8002ff6:	2306      	movs	r3, #6
 8002ff8:	e00a      	b.n	8003010 <HAL_GPIO_Init+0x228>
 8002ffa:	2305      	movs	r3, #5
 8002ffc:	e008      	b.n	8003010 <HAL_GPIO_Init+0x228>
 8002ffe:	2304      	movs	r3, #4
 8003000:	e006      	b.n	8003010 <HAL_GPIO_Init+0x228>
 8003002:	2303      	movs	r3, #3
 8003004:	e004      	b.n	8003010 <HAL_GPIO_Init+0x228>
 8003006:	2302      	movs	r3, #2
 8003008:	e002      	b.n	8003010 <HAL_GPIO_Init+0x228>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <HAL_GPIO_Init+0x228>
 800300e:	2300      	movs	r3, #0
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	f002 0203 	and.w	r2, r2, #3
 8003016:	0092      	lsls	r2, r2, #2
 8003018:	4093      	lsls	r3, r2
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003020:	4935      	ldr	r1, [pc, #212]	; (80030f8 <HAL_GPIO_Init+0x310>)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	3302      	adds	r3, #2
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800302e:	4b3b      	ldr	r3, [pc, #236]	; (800311c <HAL_GPIO_Init+0x334>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003052:	4a32      	ldr	r2, [pc, #200]	; (800311c <HAL_GPIO_Init+0x334>)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003058:	4b30      	ldr	r3, [pc, #192]	; (800311c <HAL_GPIO_Init+0x334>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800307c:	4a27      	ldr	r2, [pc, #156]	; (800311c <HAL_GPIO_Init+0x334>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003082:	4b26      	ldr	r3, [pc, #152]	; (800311c <HAL_GPIO_Init+0x334>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	43db      	mvns	r3, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4013      	ands	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030a6:	4a1d      	ldr	r2, [pc, #116]	; (800311c <HAL_GPIO_Init+0x334>)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_GPIO_Init+0x334>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030d0:	4a12      	ldr	r2, [pc, #72]	; (800311c <HAL_GPIO_Init+0x334>)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3301      	adds	r3, #1
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b0f      	cmp	r3, #15
 80030e0:	f67f ae90 	bls.w	8002e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
 80030e8:	3724      	adds	r7, #36	; 0x24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40013800 	.word	0x40013800
 80030fc:	40020000 	.word	0x40020000
 8003100:	40020400 	.word	0x40020400
 8003104:	40020800 	.word	0x40020800
 8003108:	40020c00 	.word	0x40020c00
 800310c:	40021000 	.word	0x40021000
 8003110:	40021400 	.word	0x40021400
 8003114:	40021800 	.word	0x40021800
 8003118:	40021c00 	.word	0x40021c00
 800311c:	40013c00 	.word	0x40013c00

08003120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	807b      	strh	r3, [r7, #2]
 800312c:	4613      	mov	r3, r2
 800312e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003130:	787b      	ldrb	r3, [r7, #1]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003136:	887a      	ldrh	r2, [r7, #2]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800313c:	e003      	b.n	8003146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800313e:	887b      	ldrh	r3, [r7, #2]
 8003140:	041a      	lsls	r2, r3, #16
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	619a      	str	r2, [r3, #24]
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e12b      	b.n	80033be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd fcd8 	bl	8000b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2224      	movs	r2, #36	; 0x24
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0201 	bic.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031b8:	f001 fd06 	bl	8004bc8 <HAL_RCC_GetPCLK1Freq>
 80031bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4a81      	ldr	r2, [pc, #516]	; (80033c8 <HAL_I2C_Init+0x274>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d807      	bhi.n	80031d8 <HAL_I2C_Init+0x84>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a80      	ldr	r2, [pc, #512]	; (80033cc <HAL_I2C_Init+0x278>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	bf94      	ite	ls
 80031d0:	2301      	movls	r3, #1
 80031d2:	2300      	movhi	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e006      	b.n	80031e6 <HAL_I2C_Init+0x92>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a7d      	ldr	r2, [pc, #500]	; (80033d0 <HAL_I2C_Init+0x27c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	bf94      	ite	ls
 80031e0:	2301      	movls	r3, #1
 80031e2:	2300      	movhi	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0e7      	b.n	80033be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a78      	ldr	r2, [pc, #480]	; (80033d4 <HAL_I2C_Init+0x280>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	0c9b      	lsrs	r3, r3, #18
 80031f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a6a      	ldr	r2, [pc, #424]	; (80033c8 <HAL_I2C_Init+0x274>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d802      	bhi.n	8003228 <HAL_I2C_Init+0xd4>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	3301      	adds	r3, #1
 8003226:	e009      	b.n	800323c <HAL_I2C_Init+0xe8>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	4a69      	ldr	r2, [pc, #420]	; (80033d8 <HAL_I2C_Init+0x284>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	099b      	lsrs	r3, r3, #6
 800323a:	3301      	adds	r3, #1
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	430b      	orrs	r3, r1
 8003242:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800324e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	495c      	ldr	r1, [pc, #368]	; (80033c8 <HAL_I2C_Init+0x274>)
 8003258:	428b      	cmp	r3, r1
 800325a:	d819      	bhi.n	8003290 <HAL_I2C_Init+0x13c>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1e59      	subs	r1, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fbb1 f3f3 	udiv	r3, r1, r3
 800326a:	1c59      	adds	r1, r3, #1
 800326c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003270:	400b      	ands	r3, r1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_I2C_Init+0x138>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1e59      	subs	r1, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fbb1 f3f3 	udiv	r3, r1, r3
 8003284:	3301      	adds	r3, #1
 8003286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328a:	e051      	b.n	8003330 <HAL_I2C_Init+0x1dc>
 800328c:	2304      	movs	r3, #4
 800328e:	e04f      	b.n	8003330 <HAL_I2C_Init+0x1dc>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d111      	bne.n	80032bc <HAL_I2C_Init+0x168>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1e58      	subs	r0, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	440b      	add	r3, r1
 80032a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032aa:	3301      	adds	r3, #1
 80032ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e012      	b.n	80032e2 <HAL_I2C_Init+0x18e>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1e58      	subs	r0, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	0099      	lsls	r1, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d2:	3301      	adds	r3, #1
 80032d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_I2C_Init+0x196>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e022      	b.n	8003330 <HAL_I2C_Init+0x1dc>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10e      	bne.n	8003310 <HAL_I2C_Init+0x1bc>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1e58      	subs	r0, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6859      	ldr	r1, [r3, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	440b      	add	r3, r1
 8003300:	fbb0 f3f3 	udiv	r3, r0, r3
 8003304:	3301      	adds	r3, #1
 8003306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330e:	e00f      	b.n	8003330 <HAL_I2C_Init+0x1dc>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1e58      	subs	r0, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	0099      	lsls	r1, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	fbb0 f3f3 	udiv	r3, r0, r3
 8003326:	3301      	adds	r3, #1
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	6809      	ldr	r1, [r1, #0]
 8003334:	4313      	orrs	r3, r2
 8003336:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800335e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6911      	ldr	r1, [r2, #16]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68d2      	ldr	r2, [r2, #12]
 800336a:	4311      	orrs	r1, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	430b      	orrs	r3, r1
 8003372:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	000186a0 	.word	0x000186a0
 80033cc:	001e847f 	.word	0x001e847f
 80033d0:	003d08ff 	.word	0x003d08ff
 80033d4:	431bde83 	.word	0x431bde83
 80033d8:	10624dd3 	.word	0x10624dd3

080033dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	4608      	mov	r0, r1
 80033e6:	4611      	mov	r1, r2
 80033e8:	461a      	mov	r2, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	817b      	strh	r3, [r7, #10]
 80033ee:	460b      	mov	r3, r1
 80033f0:	813b      	strh	r3, [r7, #8]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033f6:	f7ff fb23 	bl	8002a40 <HAL_GetTick>
 80033fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b20      	cmp	r3, #32
 8003406:	f040 80d9 	bne.w	80035bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2319      	movs	r3, #25
 8003410:	2201      	movs	r2, #1
 8003412:	496d      	ldr	r1, [pc, #436]	; (80035c8 <HAL_I2C_Mem_Write+0x1ec>)
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fdad 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
 8003422:	e0cc      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_I2C_Mem_Write+0x56>
 800342e:	2302      	movs	r3, #2
 8003430:	e0c5      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d007      	beq.n	8003458 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003466:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2221      	movs	r2, #33	; 0x21
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2240      	movs	r2, #64	; 0x40
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a3a      	ldr	r2, [r7, #32]
 8003482:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003488:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a4d      	ldr	r2, [pc, #308]	; (80035cc <HAL_I2C_Mem_Write+0x1f0>)
 8003498:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800349a:	88f8      	ldrh	r0, [r7, #6]
 800349c:	893a      	ldrh	r2, [r7, #8]
 800349e:	8979      	ldrh	r1, [r7, #10]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	4603      	mov	r3, r0
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fbe4 	bl	8003c78 <I2C_RequestMemoryWrite>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d052      	beq.n	800355c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e081      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fe2e 	bl	8004120 <I2C_WaitOnTXEFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00d      	beq.n	80034e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d107      	bne.n	80034e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06b      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	781a      	ldrb	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b04      	cmp	r3, #4
 8003522:	d11b      	bne.n	800355c <HAL_I2C_Mem_Write+0x180>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	2b00      	cmp	r3, #0
 800352a:	d017      	beq.n	800355c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	781a      	ldrb	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1aa      	bne.n	80034ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fe1a 	bl	80041a2 <I2C_WaitOnBTFFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00d      	beq.n	8003590 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	2b04      	cmp	r3, #4
 800357a:	d107      	bne.n	800358c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e016      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80035bc:	2302      	movs	r3, #2
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	00100002 	.word	0x00100002
 80035cc:	ffff0000 	.word	0xffff0000

080035d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08c      	sub	sp, #48	; 0x30
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	4608      	mov	r0, r1
 80035da:	4611      	mov	r1, r2
 80035dc:	461a      	mov	r2, r3
 80035de:	4603      	mov	r3, r0
 80035e0:	817b      	strh	r3, [r7, #10]
 80035e2:	460b      	mov	r3, r1
 80035e4:	813b      	strh	r3, [r7, #8]
 80035e6:	4613      	mov	r3, r2
 80035e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ea:	f7ff fa29 	bl	8002a40 <HAL_GetTick>
 80035ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	f040 8208 	bne.w	8003a0e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	2319      	movs	r3, #25
 8003604:	2201      	movs	r2, #1
 8003606:	497b      	ldr	r1, [pc, #492]	; (80037f4 <HAL_I2C_Mem_Read+0x224>)
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fcb3 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003614:	2302      	movs	r3, #2
 8003616:	e1fb      	b.n	8003a10 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_I2C_Mem_Read+0x56>
 8003622:	2302      	movs	r3, #2
 8003624:	e1f4      	b.n	8003a10 <HAL_I2C_Mem_Read+0x440>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b01      	cmp	r3, #1
 800363a:	d007      	beq.n	800364c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800365a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2222      	movs	r2, #34	; 0x22
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2240      	movs	r2, #64	; 0x40
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800367c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4a5b      	ldr	r2, [pc, #364]	; (80037f8 <HAL_I2C_Mem_Read+0x228>)
 800368c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800368e:	88f8      	ldrh	r0, [r7, #6]
 8003690:	893a      	ldrh	r2, [r7, #8]
 8003692:	8979      	ldrh	r1, [r7, #10]
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	4603      	mov	r3, r0
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fb80 	bl	8003da4 <I2C_RequestMemoryRead>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e1b0      	b.n	8003a10 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d113      	bne.n	80036de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b6:	2300      	movs	r3, #0
 80036b8:	623b      	str	r3, [r7, #32]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	623b      	str	r3, [r7, #32]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	623b      	str	r3, [r7, #32]
 80036ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	e184      	b.n	80039e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d11b      	bne.n	800371e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	e164      	b.n	80039e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003722:	2b02      	cmp	r3, #2
 8003724:	d11b      	bne.n	800375e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003734:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003744:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	e144      	b.n	80039e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003774:	e138      	b.n	80039e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377a:	2b03      	cmp	r3, #3
 800377c:	f200 80f1 	bhi.w	8003962 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003784:	2b01      	cmp	r3, #1
 8003786:	d123      	bne.n	80037d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fd49 	bl	8004224 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e139      	b.n	8003a10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037ce:	e10b      	b.n	80039e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d14e      	bne.n	8003876 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037de:	2200      	movs	r2, #0
 80037e0:	4906      	ldr	r1, [pc, #24]	; (80037fc <HAL_I2C_Mem_Read+0x22c>)
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fbc6 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e10e      	b.n	8003a10 <HAL_I2C_Mem_Read+0x440>
 80037f2:	bf00      	nop
 80037f4:	00100002 	.word	0x00100002
 80037f8:	ffff0000 	.word	0xffff0000
 80037fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003874:	e0b8      	b.n	80039e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	2200      	movs	r2, #0
 800387e:	4966      	ldr	r1, [pc, #408]	; (8003a18 <HAL_I2C_Mem_Read+0x448>)
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fb77 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0bf      	b.n	8003a10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	2200      	movs	r2, #0
 80038da:	494f      	ldr	r1, [pc, #316]	; (8003a18 <HAL_I2C_Mem_Read+0x448>)
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fb49 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e091      	b.n	8003a10 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003960:	e042      	b.n	80039e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fc5c 	bl	8004224 <I2C_WaitOnRXNEFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e04c      	b.n	8003a10 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d118      	bne.n	80039e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f47f aec2 	bne.w	8003776 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e000      	b.n	8003a10 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a0e:	2302      	movs	r3, #2
  }
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3728      	adds	r7, #40	; 0x28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	00010004 	.word	0x00010004

08003a1c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a2c:	f7ff f808 	bl	8002a40 <HAL_GetTick>
 8003a30:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003a32:	2301      	movs	r3, #1
 8003a34:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	f040 8111 	bne.w	8003c66 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2319      	movs	r3, #25
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4988      	ldr	r1, [pc, #544]	; (8003c70 <HAL_I2C_IsDeviceReady+0x254>)
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fa90 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e104      	b.n	8003c68 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_I2C_IsDeviceReady+0x50>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e0fd      	b.n	8003c68 <HAL_I2C_IsDeviceReady+0x24c>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d007      	beq.n	8003a92 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2224      	movs	r2, #36	; 0x24
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a70      	ldr	r2, [pc, #448]	; (8003c74 <HAL_I2C_IsDeviceReady+0x258>)
 8003ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fa4e 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00d      	beq.n	8003afa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aec:	d103      	bne.n	8003af6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e0b6      	b.n	8003c68 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b08:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b0a:	f7fe ff99 	bl	8002a40 <HAL_GetTick>
 8003b0e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	bf0c      	ite	eq
 8003b1e:	2301      	moveq	r3, #1
 8003b20:	2300      	movne	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b34:	bf0c      	ite	eq
 8003b36:	2301      	moveq	r3, #1
 8003b38:	2300      	movne	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b3e:	e025      	b.n	8003b8c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b40:	f7fe ff7e 	bl	8002a40 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d302      	bcc.n	8003b56 <HAL_I2C_IsDeviceReady+0x13a>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	22a0      	movs	r2, #160	; 0xa0
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2ba0      	cmp	r3, #160	; 0xa0
 8003b96:	d005      	beq.n	8003ba4 <HAL_I2C_IsDeviceReady+0x188>
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <HAL_I2C_IsDeviceReady+0x188>
 8003b9e:	7dbb      	ldrb	r3, [r7, #22]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0cd      	beq.n	8003b40 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d129      	bne.n	8003c0e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2319      	movs	r3, #25
 8003be6:	2201      	movs	r2, #1
 8003be8:	4921      	ldr	r1, [pc, #132]	; (8003c70 <HAL_I2C_IsDeviceReady+0x254>)
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f9c2 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e036      	b.n	8003c68 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e02c      	b.n	8003c68 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c26:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2319      	movs	r3, #25
 8003c2e:	2201      	movs	r2, #1
 8003c30:	490f      	ldr	r1, [pc, #60]	; (8003c70 <HAL_I2C_IsDeviceReady+0x254>)
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f99e 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e012      	b.n	8003c68 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	3301      	adds	r3, #1
 8003c46:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	f4ff af32 	bcc.w	8003ab6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
  }
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	00100002 	.word	0x00100002
 8003c74:	ffff0000 	.word	0xffff0000

08003c78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	4608      	mov	r0, r1
 8003c82:	4611      	mov	r1, r2
 8003c84:	461a      	mov	r2, r3
 8003c86:	4603      	mov	r3, r0
 8003c88:	817b      	strh	r3, [r7, #10]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	813b      	strh	r3, [r7, #8]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f960 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00d      	beq.n	8003cd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc8:	d103      	bne.n	8003cd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e05f      	b.n	8003d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cd6:	897b      	ldrh	r3, [r7, #10]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ce4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	6a3a      	ldr	r2, [r7, #32]
 8003cea:	492d      	ldr	r1, [pc, #180]	; (8003da0 <I2C_RequestMemoryWrite+0x128>)
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f998 	bl	8004022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e04c      	b.n	8003d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	6a39      	ldr	r1, [r7, #32]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fa02 	bl	8004120 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d107      	bne.n	8003d3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e02b      	b.n	8003d96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d105      	bne.n	8003d50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d44:	893b      	ldrh	r3, [r7, #8]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	611a      	str	r2, [r3, #16]
 8003d4e:	e021      	b.n	8003d94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d50:	893b      	ldrh	r3, [r7, #8]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d60:	6a39      	ldr	r1, [r7, #32]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f9dc 	bl	8004120 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00d      	beq.n	8003d8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d107      	bne.n	8003d86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e005      	b.n	8003d96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8a:	893b      	ldrh	r3, [r7, #8]
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	00010002 	.word	0x00010002

08003da4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	4608      	mov	r0, r1
 8003dae:	4611      	mov	r1, r2
 8003db0:	461a      	mov	r2, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	817b      	strh	r3, [r7, #10]
 8003db6:	460b      	mov	r3, r1
 8003db8:	813b      	strh	r3, [r7, #8]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f8c2 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00d      	beq.n	8003e12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e04:	d103      	bne.n	8003e0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e0aa      	b.n	8003f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e12:	897b      	ldrh	r3, [r7, #10]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	6a3a      	ldr	r2, [r7, #32]
 8003e26:	4952      	ldr	r1, [pc, #328]	; (8003f70 <I2C_RequestMemoryRead+0x1cc>)
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f8fa 	bl	8004022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e097      	b.n	8003f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e50:	6a39      	ldr	r1, [r7, #32]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f964 	bl	8004120 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d107      	bne.n	8003e76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e076      	b.n	8003f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d105      	bne.n	8003e8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e80:	893b      	ldrh	r3, [r7, #8]
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	611a      	str	r2, [r3, #16]
 8003e8a:	e021      	b.n	8003ed0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e8c:	893b      	ldrh	r3, [r7, #8]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9c:	6a39      	ldr	r1, [r7, #32]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f93e 	bl	8004120 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00d      	beq.n	8003ec6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d107      	bne.n	8003ec2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e050      	b.n	8003f68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec6:	893b      	ldrh	r3, [r7, #8]
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed2:	6a39      	ldr	r1, [r7, #32]
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 f923 	bl	8004120 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00d      	beq.n	8003efc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d107      	bne.n	8003ef8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e035      	b.n	8003f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f82b 	bl	8003f74 <I2C_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00d      	beq.n	8003f40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f32:	d103      	bne.n	8003f3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e013      	b.n	8003f68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f40:	897b      	ldrh	r3, [r7, #10]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	6a3a      	ldr	r2, [r7, #32]
 8003f54:	4906      	ldr	r1, [pc, #24]	; (8003f70 <I2C_RequestMemoryRead+0x1cc>)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f863 	bl	8004022 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	00010002 	.word	0x00010002

08003f74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f84:	e025      	b.n	8003fd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d021      	beq.n	8003fd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8e:	f7fe fd57 	bl	8002a40 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d302      	bcc.n	8003fa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d116      	bne.n	8003fd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f043 0220 	orr.w	r2, r3, #32
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e023      	b.n	800401a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	0c1b      	lsrs	r3, r3, #16
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d10d      	bne.n	8003ff8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	43da      	mvns	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bf0c      	ite	eq
 8003fee:	2301      	moveq	r3, #1
 8003ff0:	2300      	movne	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	e00c      	b.n	8004012 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	43da      	mvns	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	429a      	cmp	r2, r3
 8004016:	d0b6      	beq.n	8003f86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004030:	e051      	b.n	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004040:	d123      	bne.n	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004050:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800405a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f043 0204 	orr.w	r2, r3, #4
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e046      	b.n	8004118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d021      	beq.n	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004092:	f7fe fcd5 	bl	8002a40 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d302      	bcc.n	80040a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d116      	bne.n	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f043 0220 	orr.w	r2, r3, #32
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e020      	b.n	8004118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d10c      	bne.n	80040fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	43da      	mvns	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4013      	ands	r3, r2
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf14      	ite	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	2300      	moveq	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	e00b      	b.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	43da      	mvns	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4013      	ands	r3, r2
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf14      	ite	ne
 800410c:	2301      	movne	r3, #1
 800410e:	2300      	moveq	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d18d      	bne.n	8004032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800412c:	e02d      	b.n	800418a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f8ce 	bl	80042d0 <I2C_IsAcknowledgeFailed>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e02d      	b.n	800419a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d021      	beq.n	800418a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004146:	f7fe fc7b 	bl	8002a40 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	429a      	cmp	r2, r3
 8004154:	d302      	bcc.n	800415c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d116      	bne.n	800418a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f043 0220 	orr.w	r2, r3, #32
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e007      	b.n	800419a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b80      	cmp	r3, #128	; 0x80
 8004196:	d1ca      	bne.n	800412e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041ae:	e02d      	b.n	800420c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f88d 	bl	80042d0 <I2C_IsAcknowledgeFailed>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e02d      	b.n	800421c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c6:	d021      	beq.n	800420c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c8:	f7fe fc3a 	bl	8002a40 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d302      	bcc.n	80041de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d116      	bne.n	800420c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	f043 0220 	orr.w	r2, r3, #32
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e007      	b.n	800421c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b04      	cmp	r3, #4
 8004218:	d1ca      	bne.n	80041b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004230:	e042      	b.n	80042b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	2b10      	cmp	r3, #16
 800423e:	d119      	bne.n	8004274 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0210 	mvn.w	r2, #16
 8004248:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e029      	b.n	80042c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004274:	f7fe fbe4 	bl	8002a40 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	429a      	cmp	r2, r3
 8004282:	d302      	bcc.n	800428a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d116      	bne.n	80042b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	f043 0220 	orr.w	r2, r3, #32
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e007      	b.n	80042c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c2:	2b40      	cmp	r3, #64	; 0x40
 80042c4:	d1b5      	bne.n	8004232 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e6:	d11b      	bne.n	8004320 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	f043 0204 	orr.w	r2, r3, #4
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e264      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d075      	beq.n	800443a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800434e:	4ba3      	ldr	r3, [pc, #652]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	2b04      	cmp	r3, #4
 8004358:	d00c      	beq.n	8004374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435a:	4ba0      	ldr	r3, [pc, #640]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004362:	2b08      	cmp	r3, #8
 8004364:	d112      	bne.n	800438c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004366:	4b9d      	ldr	r3, [pc, #628]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004372:	d10b      	bne.n	800438c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004374:	4b99      	ldr	r3, [pc, #612]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d05b      	beq.n	8004438 <HAL_RCC_OscConfig+0x108>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d157      	bne.n	8004438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e23f      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004394:	d106      	bne.n	80043a4 <HAL_RCC_OscConfig+0x74>
 8004396:	4b91      	ldr	r3, [pc, #580]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a90      	ldr	r2, [pc, #576]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 800439c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	e01d      	b.n	80043e0 <HAL_RCC_OscConfig+0xb0>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x98>
 80043ae:	4b8b      	ldr	r3, [pc, #556]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a8a      	ldr	r2, [pc, #552]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	4b88      	ldr	r3, [pc, #544]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a87      	ldr	r2, [pc, #540]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e00b      	b.n	80043e0 <HAL_RCC_OscConfig+0xb0>
 80043c8:	4b84      	ldr	r3, [pc, #528]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a83      	ldr	r2, [pc, #524]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 80043ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	4b81      	ldr	r3, [pc, #516]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a80      	ldr	r2, [pc, #512]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 80043da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d013      	beq.n	8004410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fe fb2a 	bl	8002a40 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fe fb26 	bl	8002a40 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e204      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	4b76      	ldr	r3, [pc, #472]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0xc0>
 800440e:	e014      	b.n	800443a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fe fb16 	bl	8002a40 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004418:	f7fe fb12 	bl	8002a40 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e1f0      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442a:	4b6c      	ldr	r3, [pc, #432]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0xe8>
 8004436:	e000      	b.n	800443a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d063      	beq.n	800450e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004446:	4b65      	ldr	r3, [pc, #404]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004452:	4b62      	ldr	r3, [pc, #392]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800445a:	2b08      	cmp	r3, #8
 800445c:	d11c      	bne.n	8004498 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445e:	4b5f      	ldr	r3, [pc, #380]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d116      	bne.n	8004498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446a:	4b5c      	ldr	r3, [pc, #368]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <HAL_RCC_OscConfig+0x152>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d001      	beq.n	8004482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e1c4      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004482:	4b56      	ldr	r3, [pc, #344]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4952      	ldr	r1, [pc, #328]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004496:	e03a      	b.n	800450e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d020      	beq.n	80044e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a0:	4b4f      	ldr	r3, [pc, #316]	; (80045e0 <HAL_RCC_OscConfig+0x2b0>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a6:	f7fe facb 	bl	8002a40 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ae:	f7fe fac7 	bl	8002a40 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e1a5      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c0:	4b46      	ldr	r3, [pc, #280]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044cc:	4b43      	ldr	r3, [pc, #268]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4940      	ldr	r1, [pc, #256]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	600b      	str	r3, [r1, #0]
 80044e0:	e015      	b.n	800450e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e2:	4b3f      	ldr	r3, [pc, #252]	; (80045e0 <HAL_RCC_OscConfig+0x2b0>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fe faaa 	bl	8002a40 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f0:	f7fe faa6 	bl	8002a40 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e184      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004502:	4b36      	ldr	r3, [pc, #216]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d030      	beq.n	800457c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d016      	beq.n	8004550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004522:	4b30      	ldr	r3, [pc, #192]	; (80045e4 <HAL_RCC_OscConfig+0x2b4>)
 8004524:	2201      	movs	r2, #1
 8004526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fe fa8a 	bl	8002a40 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004530:	f7fe fa86 	bl	8002a40 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e164      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004542:	4b26      	ldr	r3, [pc, #152]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 8004544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x200>
 800454e:	e015      	b.n	800457c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004550:	4b24      	ldr	r3, [pc, #144]	; (80045e4 <HAL_RCC_OscConfig+0x2b4>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004556:	f7fe fa73 	bl	8002a40 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800455e:	f7fe fa6f 	bl	8002a40 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e14d      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004570:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 8004572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f0      	bne.n	800455e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80a0 	beq.w	80046ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458a:	2300      	movs	r3, #0
 800458c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10f      	bne.n	80045ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	4a0e      	ldr	r2, [pc, #56]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a8:	6413      	str	r3, [r2, #64]	; 0x40
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <HAL_RCC_OscConfig+0x2ac>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCC_OscConfig+0x2b8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d121      	bne.n	800460a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c6:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <HAL_RCC_OscConfig+0x2b8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a07      	ldr	r2, [pc, #28]	; (80045e8 <HAL_RCC_OscConfig+0x2b8>)
 80045cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d2:	f7fe fa35 	bl	8002a40 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d8:	e011      	b.n	80045fe <HAL_RCC_OscConfig+0x2ce>
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800
 80045e0:	42470000 	.word	0x42470000
 80045e4:	42470e80 	.word	0x42470e80
 80045e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ec:	f7fe fa28 	bl	8002a40 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e106      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fe:	4b85      	ldr	r3, [pc, #532]	; (8004814 <HAL_RCC_OscConfig+0x4e4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d106      	bne.n	8004620 <HAL_RCC_OscConfig+0x2f0>
 8004612:	4b81      	ldr	r3, [pc, #516]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a80      	ldr	r2, [pc, #512]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	6713      	str	r3, [r2, #112]	; 0x70
 800461e:	e01c      	b.n	800465a <HAL_RCC_OscConfig+0x32a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b05      	cmp	r3, #5
 8004626:	d10c      	bne.n	8004642 <HAL_RCC_OscConfig+0x312>
 8004628:	4b7b      	ldr	r3, [pc, #492]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	4a7a      	ldr	r2, [pc, #488]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 800462e:	f043 0304 	orr.w	r3, r3, #4
 8004632:	6713      	str	r3, [r2, #112]	; 0x70
 8004634:	4b78      	ldr	r3, [pc, #480]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4a77      	ldr	r2, [pc, #476]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	6713      	str	r3, [r2, #112]	; 0x70
 8004640:	e00b      	b.n	800465a <HAL_RCC_OscConfig+0x32a>
 8004642:	4b75      	ldr	r3, [pc, #468]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004646:	4a74      	ldr	r2, [pc, #464]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 8004648:	f023 0301 	bic.w	r3, r3, #1
 800464c:	6713      	str	r3, [r2, #112]	; 0x70
 800464e:	4b72      	ldr	r3, [pc, #456]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	4a71      	ldr	r2, [pc, #452]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 8004654:	f023 0304 	bic.w	r3, r3, #4
 8004658:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d015      	beq.n	800468e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004662:	f7fe f9ed 	bl	8002a40 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004668:	e00a      	b.n	8004680 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800466a:	f7fe f9e9 	bl	8002a40 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f241 3288 	movw	r2, #5000	; 0x1388
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e0c5      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004680:	4b65      	ldr	r3, [pc, #404]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0ee      	beq.n	800466a <HAL_RCC_OscConfig+0x33a>
 800468c:	e014      	b.n	80046b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800468e:	f7fe f9d7 	bl	8002a40 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004694:	e00a      	b.n	80046ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004696:	f7fe f9d3 	bl	8002a40 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e0af      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ac:	4b5a      	ldr	r3, [pc, #360]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1ee      	bne.n	8004696 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b8:	7dfb      	ldrb	r3, [r7, #23]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d105      	bne.n	80046ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046be:	4b56      	ldr	r3, [pc, #344]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	4a55      	ldr	r2, [pc, #340]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 80046c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 809b 	beq.w	800480a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046d4:	4b50      	ldr	r3, [pc, #320]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d05c      	beq.n	800479a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d141      	bne.n	800476c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e8:	4b4c      	ldr	r3, [pc, #304]	; (800481c <HAL_RCC_OscConfig+0x4ec>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ee:	f7fe f9a7 	bl	8002a40 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f6:	f7fe f9a3 	bl	8002a40 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e081      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004708:	4b43      	ldr	r3, [pc, #268]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f0      	bne.n	80046f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69da      	ldr	r2, [r3, #28]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	019b      	lsls	r3, r3, #6
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	085b      	lsrs	r3, r3, #1
 800472c:	3b01      	subs	r3, #1
 800472e:	041b      	lsls	r3, r3, #16
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	061b      	lsls	r3, r3, #24
 8004738:	4937      	ldr	r1, [pc, #220]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 800473a:	4313      	orrs	r3, r2
 800473c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800473e:	4b37      	ldr	r3, [pc, #220]	; (800481c <HAL_RCC_OscConfig+0x4ec>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fe f97c 	bl	8002a40 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474c:	f7fe f978 	bl	8002a40 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e056      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475e:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x41c>
 800476a:	e04e      	b.n	800480a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476c:	4b2b      	ldr	r3, [pc, #172]	; (800481c <HAL_RCC_OscConfig+0x4ec>)
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004772:	f7fe f965 	bl	8002a40 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800477a:	f7fe f961 	bl	8002a40 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e03f      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478c:	4b22      	ldr	r3, [pc, #136]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f0      	bne.n	800477a <HAL_RCC_OscConfig+0x44a>
 8004798:	e037      	b.n	800480a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e032      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047a6:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <HAL_RCC_OscConfig+0x4e8>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d028      	beq.n	8004806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047be:	429a      	cmp	r2, r3
 80047c0:	d121      	bne.n	8004806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d11a      	bne.n	8004806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047d6:	4013      	ands	r3, r2
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047de:	4293      	cmp	r3, r2
 80047e0:	d111      	bne.n	8004806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	3b01      	subs	r3, #1
 80047f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d001      	beq.n	800480a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3718      	adds	r7, #24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40007000 	.word	0x40007000
 8004818:	40023800 	.word	0x40023800
 800481c:	42470060 	.word	0x42470060

08004820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0cc      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004834:	4b68      	ldr	r3, [pc, #416]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d90c      	bls.n	800485c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004842:	4b65      	ldr	r3, [pc, #404]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484a:	4b63      	ldr	r3, [pc, #396]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d001      	beq.n	800485c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0b8      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d020      	beq.n	80048aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004874:	4b59      	ldr	r3, [pc, #356]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	4a58      	ldr	r2, [pc, #352]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800487e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800488c:	4b53      	ldr	r3, [pc, #332]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4a52      	ldr	r2, [pc, #328]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004896:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004898:	4b50      	ldr	r3, [pc, #320]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	494d      	ldr	r1, [pc, #308]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d044      	beq.n	8004940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d107      	bne.n	80048ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048be:	4b47      	ldr	r3, [pc, #284]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d119      	bne.n	80048fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e07f      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d003      	beq.n	80048de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d107      	bne.n	80048ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048de:	4b3f      	ldr	r3, [pc, #252]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d109      	bne.n	80048fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e06f      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ee:	4b3b      	ldr	r3, [pc, #236]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e067      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048fe:	4b37      	ldr	r3, [pc, #220]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f023 0203 	bic.w	r2, r3, #3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	4934      	ldr	r1, [pc, #208]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	4313      	orrs	r3, r2
 800490e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004910:	f7fe f896 	bl	8002a40 <HAL_GetTick>
 8004914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004916:	e00a      	b.n	800492e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004918:	f7fe f892 	bl	8002a40 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f241 3288 	movw	r2, #5000	; 0x1388
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e04f      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492e:	4b2b      	ldr	r3, [pc, #172]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 020c 	and.w	r2, r3, #12
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	429a      	cmp	r2, r3
 800493e:	d1eb      	bne.n	8004918 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004940:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d20c      	bcs.n	8004968 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494e:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004956:	4b20      	ldr	r3, [pc, #128]	; (80049d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d001      	beq.n	8004968 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e032      	b.n	80049ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004974:	4b19      	ldr	r3, [pc, #100]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4916      	ldr	r1, [pc, #88]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	490e      	ldr	r1, [pc, #56]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049a6:	f000 f821 	bl	80049ec <HAL_RCC_GetSysClockFreq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	091b      	lsrs	r3, r3, #4
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	490a      	ldr	r1, [pc, #40]	; (80049e0 <HAL_RCC_ClockConfig+0x1c0>)
 80049b8:	5ccb      	ldrb	r3, [r1, r3]
 80049ba:	fa22 f303 	lsr.w	r3, r2, r3
 80049be:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <HAL_RCC_ClockConfig+0x1c4>)
 80049c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <HAL_RCC_ClockConfig+0x1c8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fd fff6 	bl	80029b8 <HAL_InitTick>

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40023c00 	.word	0x40023c00
 80049dc:	40023800 	.word	0x40023800
 80049e0:	0800a240 	.word	0x0800a240
 80049e4:	20000008 	.word	0x20000008
 80049e8:	2000000c 	.word	0x2000000c

080049ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	607b      	str	r3, [r7, #4]
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	2300      	movs	r3, #0
 80049fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a04:	4b67      	ldr	r3, [pc, #412]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 030c 	and.w	r3, r3, #12
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d00d      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0x40>
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	f200 80bd 	bhi.w	8004b90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0x34>
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d003      	beq.n	8004a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a1e:	e0b7      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a20:	4b61      	ldr	r3, [pc, #388]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a22:	60bb      	str	r3, [r7, #8]
       break;
 8004a24:	e0b7      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a26:	4b61      	ldr	r3, [pc, #388]	; (8004bac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a28:	60bb      	str	r3, [r7, #8]
      break;
 8004a2a:	e0b4      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a2c:	4b5d      	ldr	r3, [pc, #372]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a36:	4b5b      	ldr	r3, [pc, #364]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d04d      	beq.n	8004ade <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a42:	4b58      	ldr	r3, [pc, #352]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a52:	f04f 0100 	mov.w	r1, #0
 8004a56:	ea02 0800 	and.w	r8, r2, r0
 8004a5a:	ea03 0901 	and.w	r9, r3, r1
 8004a5e:	4640      	mov	r0, r8
 8004a60:	4649      	mov	r1, r9
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	014b      	lsls	r3, r1, #5
 8004a6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a70:	0142      	lsls	r2, r0, #5
 8004a72:	4610      	mov	r0, r2
 8004a74:	4619      	mov	r1, r3
 8004a76:	ebb0 0008 	subs.w	r0, r0, r8
 8004a7a:	eb61 0109 	sbc.w	r1, r1, r9
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	018b      	lsls	r3, r1, #6
 8004a88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a8c:	0182      	lsls	r2, r0, #6
 8004a8e:	1a12      	subs	r2, r2, r0
 8004a90:	eb63 0301 	sbc.w	r3, r3, r1
 8004a94:	f04f 0000 	mov.w	r0, #0
 8004a98:	f04f 0100 	mov.w	r1, #0
 8004a9c:	00d9      	lsls	r1, r3, #3
 8004a9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004aa2:	00d0      	lsls	r0, r2, #3
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	eb12 0208 	adds.w	r2, r2, r8
 8004aac:	eb43 0309 	adc.w	r3, r3, r9
 8004ab0:	f04f 0000 	mov.w	r0, #0
 8004ab4:	f04f 0100 	mov.w	r1, #0
 8004ab8:	0259      	lsls	r1, r3, #9
 8004aba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004abe:	0250      	lsls	r0, r2, #9
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	461a      	mov	r2, r3
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	f7fb fb7a 	bl	80001c8 <__aeabi_uldivmod>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4613      	mov	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	e04a      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ade:	4b31      	ldr	r3, [pc, #196]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	099b      	lsrs	r3, r3, #6
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004aee:	f04f 0100 	mov.w	r1, #0
 8004af2:	ea02 0400 	and.w	r4, r2, r0
 8004af6:	ea03 0501 	and.w	r5, r3, r1
 8004afa:	4620      	mov	r0, r4
 8004afc:	4629      	mov	r1, r5
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	014b      	lsls	r3, r1, #5
 8004b08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b0c:	0142      	lsls	r2, r0, #5
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	1b00      	subs	r0, r0, r4
 8004b14:	eb61 0105 	sbc.w	r1, r1, r5
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	018b      	lsls	r3, r1, #6
 8004b22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b26:	0182      	lsls	r2, r0, #6
 8004b28:	1a12      	subs	r2, r2, r0
 8004b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b2e:	f04f 0000 	mov.w	r0, #0
 8004b32:	f04f 0100 	mov.w	r1, #0
 8004b36:	00d9      	lsls	r1, r3, #3
 8004b38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b3c:	00d0      	lsls	r0, r2, #3
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	1912      	adds	r2, r2, r4
 8004b44:	eb45 0303 	adc.w	r3, r5, r3
 8004b48:	f04f 0000 	mov.w	r0, #0
 8004b4c:	f04f 0100 	mov.w	r1, #0
 8004b50:	0299      	lsls	r1, r3, #10
 8004b52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b56:	0290      	lsls	r0, r2, #10
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	f7fb fb2e 	bl	80001c8 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4613      	mov	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b74:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	0c1b      	lsrs	r3, r3, #16
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	60bb      	str	r3, [r7, #8]
      break;
 8004b8e:	e002      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b92:	60bb      	str	r3, [r7, #8]
      break;
 8004b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b96:	68bb      	ldr	r3, [r7, #8]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	00f42400 	.word	0x00f42400
 8004bac:	007a1200 	.word	0x007a1200

08004bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb4:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000008 	.word	0x20000008

08004bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bcc:	f7ff fff0 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	0a9b      	lsrs	r3, r3, #10
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	4903      	ldr	r1, [pc, #12]	; (8004bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bde:	5ccb      	ldrb	r3, [r1, r3]
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40023800 	.word	0x40023800
 8004bec:	0800a250 	.word	0x0800a250

08004bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bf4:	f7ff ffdc 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	0b5b      	lsrs	r3, r3, #13
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	4903      	ldr	r1, [pc, #12]	; (8004c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c06:	5ccb      	ldrb	r3, [r1, r3]
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40023800 	.word	0x40023800
 8004c14:	0800a250 	.word	0x0800a250

08004c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e07b      	b.n	8004d22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d108      	bne.n	8004c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c3a:	d009      	beq.n	8004c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	61da      	str	r2, [r3, #28]
 8004c42:	e005      	b.n	8004c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fd fc42 	bl	80024f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd4:	ea42 0103 	orr.w	r1, r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	f003 0104 	and.w	r1, r3, #4
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	f003 0210 	and.w	r2, r3, #16
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b088      	sub	sp, #32
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	603b      	str	r3, [r7, #0]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_SPI_Transmit+0x22>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e126      	b.n	8004f9a <HAL_SPI_Transmit+0x270>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d54:	f7fd fe74 	bl	8002a40 <HAL_GetTick>
 8004d58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d002      	beq.n	8004d70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d6e:	e10b      	b.n	8004f88 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_SPI_Transmit+0x52>
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d80:	e102      	b.n	8004f88 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2203      	movs	r2, #3
 8004d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	88fa      	ldrh	r2, [r7, #6]
 8004d9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	88fa      	ldrh	r2, [r7, #6]
 8004da0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc8:	d10f      	bne.n	8004dea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004de8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b40      	cmp	r3, #64	; 0x40
 8004df6:	d007      	beq.n	8004e08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e10:	d14b      	bne.n	8004eaa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_SPI_Transmit+0xf6>
 8004e1a:	8afb      	ldrh	r3, [r7, #22]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d13e      	bne.n	8004e9e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	881a      	ldrh	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	1c9a      	adds	r2, r3, #2
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e44:	e02b      	b.n	8004e9e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d112      	bne.n	8004e7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	881a      	ldrh	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	1c9a      	adds	r2, r3, #2
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e78:	e011      	b.n	8004e9e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e7a:	f7fd fde1 	bl	8002a40 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d803      	bhi.n	8004e92 <HAL_SPI_Transmit+0x168>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d102      	bne.n	8004e98 <HAL_SPI_Transmit+0x16e>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e9c:	e074      	b.n	8004f88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1ce      	bne.n	8004e46 <HAL_SPI_Transmit+0x11c>
 8004ea8:	e04c      	b.n	8004f44 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_SPI_Transmit+0x18e>
 8004eb2:	8afb      	ldrh	r3, [r7, #22]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d140      	bne.n	8004f3a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	7812      	ldrb	r2, [r2, #0]
 8004ec4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ede:	e02c      	b.n	8004f3a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d113      	bne.n	8004f16 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	7812      	ldrb	r2, [r2, #0]
 8004efa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f14:	e011      	b.n	8004f3a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f16:	f7fd fd93 	bl	8002a40 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d803      	bhi.n	8004f2e <HAL_SPI_Transmit+0x204>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2c:	d102      	bne.n	8004f34 <HAL_SPI_Transmit+0x20a>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f38:	e026      	b.n	8004f88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1cd      	bne.n	8004ee0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fbcb 	bl	80056e4 <SPI_EndRxTxTransaction>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	613b      	str	r3, [r7, #16]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e000      	b.n	8004f88 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f98:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3720      	adds	r7, #32
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b088      	sub	sp, #32
 8004fa6:	af02      	add	r7, sp, #8
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	603b      	str	r3, [r7, #0]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fbe:	d112      	bne.n	8004fe6 <HAL_SPI_Receive+0x44>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10e      	bne.n	8004fe6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2204      	movs	r2, #4
 8004fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004fd0:	88fa      	ldrh	r2, [r7, #6]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f8f1 	bl	80051c4 <HAL_SPI_TransmitReceive>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	e0ea      	b.n	80051bc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_SPI_Receive+0x52>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e0e3      	b.n	80051bc <HAL_SPI_Receive+0x21a>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ffc:	f7fd fd20 	bl	8002a40 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b01      	cmp	r3, #1
 800500c:	d002      	beq.n	8005014 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800500e:	2302      	movs	r3, #2
 8005010:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005012:	e0ca      	b.n	80051aa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_SPI_Receive+0x7e>
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d102      	bne.n	8005026 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005024:	e0c1      	b.n	80051aa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2204      	movs	r2, #4
 800502a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	88fa      	ldrh	r2, [r7, #6]
 800503e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800506c:	d10f      	bne.n	800508e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800507c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800508c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d007      	beq.n	80050ac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d162      	bne.n	800517a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050b4:	e02e      	b.n	8005114 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d115      	bne.n	80050f0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f103 020c 	add.w	r2, r3, #12
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	7812      	ldrb	r2, [r2, #0]
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050ee:	e011      	b.n	8005114 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050f0:	f7fd fca6 	bl	8002a40 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d803      	bhi.n	8005108 <HAL_SPI_Receive+0x166>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d102      	bne.n	800510e <HAL_SPI_Receive+0x16c>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d102      	bne.n	8005114 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005112:	e04a      	b.n	80051aa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1cb      	bne.n	80050b6 <HAL_SPI_Receive+0x114>
 800511e:	e031      	b.n	8005184 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b01      	cmp	r3, #1
 800512c:	d113      	bne.n	8005156 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	b292      	uxth	r2, r2
 800513a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	1c9a      	adds	r2, r3, #2
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005154:	e011      	b.n	800517a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005156:	f7fd fc73 	bl	8002a40 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d803      	bhi.n	800516e <HAL_SPI_Receive+0x1cc>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d102      	bne.n	8005174 <HAL_SPI_Receive+0x1d2>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005178:	e017      	b.n	80051aa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1cd      	bne.n	8005120 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fa45 	bl	8005618 <SPI_EndRxTransaction>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	75fb      	strb	r3, [r7, #23]
 80051a6:	e000      	b.n	80051aa <HAL_SPI_Receive+0x208>
  }

error :
 80051a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08c      	sub	sp, #48	; 0x30
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051d2:	2301      	movs	r3, #1
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_SPI_TransmitReceive+0x26>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e18a      	b.n	8005500 <HAL_SPI_TransmitReceive+0x33c>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051f2:	f7fd fc25 	bl	8002a40 <HAL_GetTick>
 80051f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005208:	887b      	ldrh	r3, [r7, #2]
 800520a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800520c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005210:	2b01      	cmp	r3, #1
 8005212:	d00f      	beq.n	8005234 <HAL_SPI_TransmitReceive+0x70>
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800521a:	d107      	bne.n	800522c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d103      	bne.n	800522c <HAL_SPI_TransmitReceive+0x68>
 8005224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005228:	2b04      	cmp	r3, #4
 800522a:	d003      	beq.n	8005234 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800522c:	2302      	movs	r3, #2
 800522e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005232:	e15b      	b.n	80054ec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_SPI_TransmitReceive+0x82>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_SPI_TransmitReceive+0x82>
 8005240:	887b      	ldrh	r3, [r7, #2]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d103      	bne.n	800524e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800524c:	e14e      	b.n	80054ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b04      	cmp	r3, #4
 8005258:	d003      	beq.n	8005262 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2205      	movs	r2, #5
 800525e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	887a      	ldrh	r2, [r7, #2]
 8005272:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	887a      	ldrh	r2, [r7, #2]
 8005278:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	887a      	ldrh	r2, [r7, #2]
 8005284:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	887a      	ldrh	r2, [r7, #2]
 800528a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b40      	cmp	r3, #64	; 0x40
 80052a4:	d007      	beq.n	80052b6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052be:	d178      	bne.n	80053b2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <HAL_SPI_TransmitReceive+0x10a>
 80052c8:	8b7b      	ldrh	r3, [r7, #26]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d166      	bne.n	800539c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	881a      	ldrh	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	1c9a      	adds	r2, r3, #2
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052f2:	e053      	b.n	800539c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d11b      	bne.n	800533a <HAL_SPI_TransmitReceive+0x176>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d016      	beq.n	800533a <HAL_SPI_TransmitReceive+0x176>
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	2b01      	cmp	r3, #1
 8005310:	d113      	bne.n	800533a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	881a      	ldrh	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	1c9a      	adds	r2, r3, #2
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b01      	cmp	r3, #1
 8005346:	d119      	bne.n	800537c <HAL_SPI_TransmitReceive+0x1b8>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d014      	beq.n	800537c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	b292      	uxth	r2, r2
 800535e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	1c9a      	adds	r2, r3, #2
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005378:	2301      	movs	r3, #1
 800537a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800537c:	f7fd fb60 	bl	8002a40 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005388:	429a      	cmp	r2, r3
 800538a:	d807      	bhi.n	800539c <HAL_SPI_TransmitReceive+0x1d8>
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005392:	d003      	beq.n	800539c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800539a:	e0a7      	b.n	80054ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1a6      	bne.n	80052f4 <HAL_SPI_TransmitReceive+0x130>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1a1      	bne.n	80052f4 <HAL_SPI_TransmitReceive+0x130>
 80053b0:	e07c      	b.n	80054ac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <HAL_SPI_TransmitReceive+0x1fc>
 80053ba:	8b7b      	ldrh	r3, [r7, #26]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d16b      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	7812      	ldrb	r2, [r2, #0]
 80053cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053e6:	e057      	b.n	8005498 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d11c      	bne.n	8005430 <HAL_SPI_TransmitReceive+0x26c>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d017      	beq.n	8005430 <HAL_SPI_TransmitReceive+0x26c>
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d114      	bne.n	8005430 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	330c      	adds	r3, #12
 8005410:	7812      	ldrb	r2, [r2, #0]
 8005412:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005422:	b29b      	uxth	r3, r3
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b01      	cmp	r3, #1
 800543c:	d119      	bne.n	8005472 <HAL_SPI_TransmitReceive+0x2ae>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d014      	beq.n	8005472 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800546e:	2301      	movs	r3, #1
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005472:	f7fd fae5 	bl	8002a40 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800547e:	429a      	cmp	r2, r3
 8005480:	d803      	bhi.n	800548a <HAL_SPI_TransmitReceive+0x2c6>
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d102      	bne.n	8005490 <HAL_SPI_TransmitReceive+0x2cc>
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	2b00      	cmp	r3, #0
 800548e:	d103      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005496:	e029      	b.n	80054ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1a2      	bne.n	80053e8 <HAL_SPI_TransmitReceive+0x224>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d19d      	bne.n	80053e8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f917 	bl	80056e4 <SPI_EndRxTxTransaction>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d006      	beq.n	80054ca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80054c8:	e010      	b.n	80054ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10b      	bne.n	80054ea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	e000      	b.n	80054ec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80054ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005500:	4618      	mov	r0, r3
 8005502:	3730      	adds	r7, #48	; 0x30
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	4613      	mov	r3, r2
 8005516:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005518:	f7fd fa92 	bl	8002a40 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	1a9b      	subs	r3, r3, r2
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	4413      	add	r3, r2
 8005526:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005528:	f7fd fa8a 	bl	8002a40 <HAL_GetTick>
 800552c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800552e:	4b39      	ldr	r3, [pc, #228]	; (8005614 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	015b      	lsls	r3, r3, #5
 8005534:	0d1b      	lsrs	r3, r3, #20
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	fb02 f303 	mul.w	r3, r2, r3
 800553c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800553e:	e054      	b.n	80055ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d050      	beq.n	80055ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005548:	f7fd fa7a 	bl	8002a40 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	429a      	cmp	r2, r3
 8005556:	d902      	bls.n	800555e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d13d      	bne.n	80055da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800556c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005576:	d111      	bne.n	800559c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005580:	d004      	beq.n	800558c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558a:	d107      	bne.n	800559c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800559a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a4:	d10f      	bne.n	80055c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e017      	b.n	800560a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4013      	ands	r3, r2
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	bf0c      	ite	eq
 80055fa:	2301      	moveq	r3, #1
 80055fc:	2300      	movne	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	429a      	cmp	r2, r3
 8005606:	d19b      	bne.n	8005540 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20000008 	.word	0x20000008

08005618 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800562c:	d111      	bne.n	8005652 <SPI_EndRxTransaction+0x3a>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005636:	d004      	beq.n	8005642 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005640:	d107      	bne.n	8005652 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005650:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800565a:	d12a      	bne.n	80056b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005664:	d012      	beq.n	800568c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2200      	movs	r2, #0
 800566e:	2180      	movs	r1, #128	; 0x80
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff ff49 	bl	8005508 <SPI_WaitFlagStateUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d02d      	beq.n	80056d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005680:	f043 0220 	orr.w	r2, r3, #32
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e026      	b.n	80056da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2200      	movs	r2, #0
 8005694:	2101      	movs	r1, #1
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff ff36 	bl	8005508 <SPI_WaitFlagStateUntilTimeout>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01a      	beq.n	80056d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a6:	f043 0220 	orr.w	r2, r3, #32
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e013      	b.n	80056da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2200      	movs	r2, #0
 80056ba:	2101      	movs	r1, #1
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f7ff ff23 	bl	8005508 <SPI_WaitFlagStateUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056cc:	f043 0220 	orr.w	r2, r3, #32
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e000      	b.n	80056da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af02      	add	r7, sp, #8
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056f0:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <SPI_EndRxTxTransaction+0x7c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <SPI_EndRxTxTransaction+0x80>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	0d5b      	lsrs	r3, r3, #21
 80056fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005700:	fb02 f303 	mul.w	r3, r2, r3
 8005704:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800570e:	d112      	bne.n	8005736 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2200      	movs	r2, #0
 8005718:	2180      	movs	r1, #128	; 0x80
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7ff fef4 	bl	8005508 <SPI_WaitFlagStateUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d016      	beq.n	8005754 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572a:	f043 0220 	orr.w	r2, r3, #32
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e00f      	b.n	8005756 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00a      	beq.n	8005752 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	3b01      	subs	r3, #1
 8005740:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574c:	2b80      	cmp	r3, #128	; 0x80
 800574e:	d0f2      	beq.n	8005736 <SPI_EndRxTxTransaction+0x52>
 8005750:	e000      	b.n	8005754 <SPI_EndRxTxTransaction+0x70>
        break;
 8005752:	bf00      	nop
  }

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000008 	.word	0x20000008
 8005764:	165e9f81 	.word	0x165e9f81

08005768 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e034      	b.n	80057e8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f7fb f89c 	bl	80008d0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3308      	adds	r3, #8
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f001 fc6e 	bl	8007084 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	461a      	mov	r2, r3
 80057b2:	68b9      	ldr	r1, [r7, #8]
 80057b4:	f001 fcb8 	bl	8007128 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6858      	ldr	r0, [r3, #4]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	f001 fced 	bl	80071a4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	6892      	ldr	r2, [r2, #8]
 80057d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	6892      	ldr	r2, [r2, #8]
 80057de:	f041 0101 	orr.w	r1, r1, #1
 80057e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e041      	b.n	8005886 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fc ff78 	bl	800270c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3304      	adds	r3, #4
 800582c:	4619      	mov	r1, r3
 800582e:	4610      	mov	r0, r2
 8005830:	f000 fa96 	bl	8005d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d001      	beq.n	80058a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e04e      	b.n	8005946 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a23      	ldr	r2, [pc, #140]	; (8005954 <HAL_TIM_Base_Start_IT+0xc4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d022      	beq.n	8005910 <HAL_TIM_Base_Start_IT+0x80>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d2:	d01d      	beq.n	8005910 <HAL_TIM_Base_Start_IT+0x80>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a1f      	ldr	r2, [pc, #124]	; (8005958 <HAL_TIM_Base_Start_IT+0xc8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d018      	beq.n	8005910 <HAL_TIM_Base_Start_IT+0x80>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1e      	ldr	r2, [pc, #120]	; (800595c <HAL_TIM_Base_Start_IT+0xcc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d013      	beq.n	8005910 <HAL_TIM_Base_Start_IT+0x80>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1c      	ldr	r2, [pc, #112]	; (8005960 <HAL_TIM_Base_Start_IT+0xd0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00e      	beq.n	8005910 <HAL_TIM_Base_Start_IT+0x80>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a1b      	ldr	r2, [pc, #108]	; (8005964 <HAL_TIM_Base_Start_IT+0xd4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d009      	beq.n	8005910 <HAL_TIM_Base_Start_IT+0x80>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a19      	ldr	r2, [pc, #100]	; (8005968 <HAL_TIM_Base_Start_IT+0xd8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d004      	beq.n	8005910 <HAL_TIM_Base_Start_IT+0x80>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a18      	ldr	r2, [pc, #96]	; (800596c <HAL_TIM_Base_Start_IT+0xdc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d111      	bne.n	8005934 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b06      	cmp	r3, #6
 8005920:	d010      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0201 	orr.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005932:	e007      	b.n	8005944 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0201 	orr.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40010000 	.word	0x40010000
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40010400 	.word	0x40010400
 8005968:	40014000 	.word	0x40014000
 800596c:	40001800 	.word	0x40001800

08005970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b02      	cmp	r3, #2
 8005984:	d122      	bne.n	80059cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b02      	cmp	r3, #2
 8005992:	d11b      	bne.n	80059cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0202 	mvn.w	r2, #2
 800599c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f9b5 	bl	8005d22 <HAL_TIM_IC_CaptureCallback>
 80059b8:	e005      	b.n	80059c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f9a7 	bl	8005d0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f9b8 	bl	8005d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d122      	bne.n	8005a20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d11b      	bne.n	8005a20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0204 	mvn.w	r2, #4
 80059f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2202      	movs	r2, #2
 80059f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f98b 	bl	8005d22 <HAL_TIM_IC_CaptureCallback>
 8005a0c:	e005      	b.n	8005a1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f97d 	bl	8005d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f98e 	bl	8005d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d122      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d11b      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0208 	mvn.w	r2, #8
 8005a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2204      	movs	r2, #4
 8005a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f961 	bl	8005d22 <HAL_TIM_IC_CaptureCallback>
 8005a60:	e005      	b.n	8005a6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f953 	bl	8005d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f964 	bl	8005d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b10      	cmp	r3, #16
 8005a80:	d122      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b10      	cmp	r3, #16
 8005a8e:	d11b      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f06f 0210 	mvn.w	r2, #16
 8005a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f937 	bl	8005d22 <HAL_TIM_IC_CaptureCallback>
 8005ab4:	e005      	b.n	8005ac2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f929 	bl	8005d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f93a 	bl	8005d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d10e      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d107      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0201 	mvn.w	r2, #1
 8005aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fc fca0 	bl	8002434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afe:	2b80      	cmp	r3, #128	; 0x80
 8005b00:	d10e      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0c:	2b80      	cmp	r3, #128	; 0x80
 8005b0e:	d107      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fae0 	bl	80060e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2a:	2b40      	cmp	r3, #64	; 0x40
 8005b2c:	d10e      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b38:	2b40      	cmp	r3, #64	; 0x40
 8005b3a:	d107      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f8ff 	bl	8005d4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	d10e      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d107      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0220 	mvn.w	r2, #32
 8005b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 faaa 	bl	80060cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b78:	bf00      	nop
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d101      	bne.n	8005b9c <HAL_TIM_ConfigClockSource+0x1c>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	e0b4      	b.n	8005d06 <HAL_TIM_ConfigClockSource+0x186>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd4:	d03e      	beq.n	8005c54 <HAL_TIM_ConfigClockSource+0xd4>
 8005bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bda:	f200 8087 	bhi.w	8005cec <HAL_TIM_ConfigClockSource+0x16c>
 8005bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be2:	f000 8086 	beq.w	8005cf2 <HAL_TIM_ConfigClockSource+0x172>
 8005be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bea:	d87f      	bhi.n	8005cec <HAL_TIM_ConfigClockSource+0x16c>
 8005bec:	2b70      	cmp	r3, #112	; 0x70
 8005bee:	d01a      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0xa6>
 8005bf0:	2b70      	cmp	r3, #112	; 0x70
 8005bf2:	d87b      	bhi.n	8005cec <HAL_TIM_ConfigClockSource+0x16c>
 8005bf4:	2b60      	cmp	r3, #96	; 0x60
 8005bf6:	d050      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x11a>
 8005bf8:	2b60      	cmp	r3, #96	; 0x60
 8005bfa:	d877      	bhi.n	8005cec <HAL_TIM_ConfigClockSource+0x16c>
 8005bfc:	2b50      	cmp	r3, #80	; 0x50
 8005bfe:	d03c      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0xfa>
 8005c00:	2b50      	cmp	r3, #80	; 0x50
 8005c02:	d873      	bhi.n	8005cec <HAL_TIM_ConfigClockSource+0x16c>
 8005c04:	2b40      	cmp	r3, #64	; 0x40
 8005c06:	d058      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0x13a>
 8005c08:	2b40      	cmp	r3, #64	; 0x40
 8005c0a:	d86f      	bhi.n	8005cec <HAL_TIM_ConfigClockSource+0x16c>
 8005c0c:	2b30      	cmp	r3, #48	; 0x30
 8005c0e:	d064      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0x15a>
 8005c10:	2b30      	cmp	r3, #48	; 0x30
 8005c12:	d86b      	bhi.n	8005cec <HAL_TIM_ConfigClockSource+0x16c>
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	d060      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0x15a>
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d867      	bhi.n	8005cec <HAL_TIM_ConfigClockSource+0x16c>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d05c      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0x15a>
 8005c20:	2b10      	cmp	r3, #16
 8005c22:	d05a      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0x15a>
 8005c24:	e062      	b.n	8005cec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6899      	ldr	r1, [r3, #8]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f000 f9ad 	bl	8005f94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	609a      	str	r2, [r3, #8]
      break;
 8005c52:	e04f      	b.n	8005cf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6818      	ldr	r0, [r3, #0]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	6899      	ldr	r1, [r3, #8]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f000 f996 	bl	8005f94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c76:	609a      	str	r2, [r3, #8]
      break;
 8005c78:	e03c      	b.n	8005cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6859      	ldr	r1, [r3, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	461a      	mov	r2, r3
 8005c88:	f000 f90a 	bl	8005ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2150      	movs	r1, #80	; 0x50
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 f963 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005c98:	e02c      	b.n	8005cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6818      	ldr	r0, [r3, #0]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6859      	ldr	r1, [r3, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f000 f929 	bl	8005efe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2160      	movs	r1, #96	; 0x60
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 f953 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005cb8:	e01c      	b.n	8005cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6859      	ldr	r1, [r3, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f000 f8ea 	bl	8005ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2140      	movs	r1, #64	; 0x40
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 f943 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005cd8:	e00c      	b.n	8005cf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	f000 f93a 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005cea:	e003      	b.n	8005cf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf0:	e000      	b.n	8005cf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a40      	ldr	r2, [pc, #256]	; (8005e74 <TIM_Base_SetConfig+0x114>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d013      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d7e:	d00f      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a3d      	ldr	r2, [pc, #244]	; (8005e78 <TIM_Base_SetConfig+0x118>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00b      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a3c      	ldr	r2, [pc, #240]	; (8005e7c <TIM_Base_SetConfig+0x11c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d007      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a3b      	ldr	r2, [pc, #236]	; (8005e80 <TIM_Base_SetConfig+0x120>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_Base_SetConfig+0x40>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a3a      	ldr	r2, [pc, #232]	; (8005e84 <TIM_Base_SetConfig+0x124>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d108      	bne.n	8005db2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a2f      	ldr	r2, [pc, #188]	; (8005e74 <TIM_Base_SetConfig+0x114>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d02b      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc0:	d027      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a2c      	ldr	r2, [pc, #176]	; (8005e78 <TIM_Base_SetConfig+0x118>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d023      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a2b      	ldr	r2, [pc, #172]	; (8005e7c <TIM_Base_SetConfig+0x11c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d01f      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a2a      	ldr	r2, [pc, #168]	; (8005e80 <TIM_Base_SetConfig+0x120>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d01b      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a29      	ldr	r2, [pc, #164]	; (8005e84 <TIM_Base_SetConfig+0x124>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d017      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a28      	ldr	r2, [pc, #160]	; (8005e88 <TIM_Base_SetConfig+0x128>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a27      	ldr	r2, [pc, #156]	; (8005e8c <TIM_Base_SetConfig+0x12c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00f      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a26      	ldr	r2, [pc, #152]	; (8005e90 <TIM_Base_SetConfig+0x130>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00b      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a25      	ldr	r2, [pc, #148]	; (8005e94 <TIM_Base_SetConfig+0x134>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d007      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a24      	ldr	r2, [pc, #144]	; (8005e98 <TIM_Base_SetConfig+0x138>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_Base_SetConfig+0xb2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a23      	ldr	r2, [pc, #140]	; (8005e9c <TIM_Base_SetConfig+0x13c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d108      	bne.n	8005e24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a0a      	ldr	r2, [pc, #40]	; (8005e74 <TIM_Base_SetConfig+0x114>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_Base_SetConfig+0xf8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a0c      	ldr	r2, [pc, #48]	; (8005e84 <TIM_Base_SetConfig+0x124>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d103      	bne.n	8005e60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	615a      	str	r2, [r3, #20]
}
 8005e66:	bf00      	nop
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40000800 	.word	0x40000800
 8005e80:	40000c00 	.word	0x40000c00
 8005e84:	40010400 	.word	0x40010400
 8005e88:	40014000 	.word	0x40014000
 8005e8c:	40014400 	.word	0x40014400
 8005e90:	40014800 	.word	0x40014800
 8005e94:	40001800 	.word	0x40001800
 8005e98:	40001c00 	.word	0x40001c00
 8005e9c:	40002000 	.word	0x40002000

08005ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f023 0201 	bic.w	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f023 030a 	bic.w	r3, r3, #10
 8005edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b087      	sub	sp, #28
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f023 0210 	bic.w	r2, r3, #16
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	031b      	lsls	r3, r3, #12
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f043 0307 	orr.w	r3, r3, #7
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	609a      	str	r2, [r3, #8]
}
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	021a      	lsls	r2, r3, #8
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	609a      	str	r2, [r3, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e05a      	b.n	80060a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006012:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4313      	orrs	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a21      	ldr	r2, [pc, #132]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d022      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006038:	d01d      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1d      	ldr	r2, [pc, #116]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d018      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1b      	ldr	r2, [pc, #108]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d013      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a1a      	ldr	r2, [pc, #104]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00e      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a18      	ldr	r2, [pc, #96]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d009      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a17      	ldr	r2, [pc, #92]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d004      	beq.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a15      	ldr	r2, [pc, #84]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d10c      	bne.n	8006090 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800607c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	4313      	orrs	r3, r2
 8006086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	40010400 	.word	0x40010400
 80060c4:	40014000 	.word	0x40014000
 80060c8:	40001800 	.word	0x40001800

080060cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e03f      	b.n	8006186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fc fb72 	bl	8002804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2224      	movs	r2, #36	; 0x24
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fddb 	bl	8006cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800614c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695a      	ldr	r2, [r3, #20]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800615c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800616c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b08a      	sub	sp, #40	; 0x28
 8006192:	af02      	add	r7, sp, #8
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	603b      	str	r3, [r7, #0]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d17c      	bne.n	80062a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <HAL_UART_Transmit+0x2c>
 80061b4:	88fb      	ldrh	r3, [r7, #6]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e075      	b.n	80062aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_UART_Transmit+0x3e>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e06e      	b.n	80062aa <HAL_UART_Transmit+0x11c>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2221      	movs	r2, #33	; 0x21
 80061de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061e2:	f7fc fc2d 	bl	8002a40 <HAL_GetTick>
 80061e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	88fa      	ldrh	r2, [r7, #6]
 80061ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	88fa      	ldrh	r2, [r7, #6]
 80061f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fc:	d108      	bne.n	8006210 <HAL_UART_Transmit+0x82>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d104      	bne.n	8006210 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	e003      	b.n	8006218 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006214:	2300      	movs	r3, #0
 8006216:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006220:	e02a      	b.n	8006278 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2200      	movs	r2, #0
 800622a:	2180      	movs	r1, #128	; 0x80
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fb1f 	bl	8006870 <UART_WaitOnFlagUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e036      	b.n	80062aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006250:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	3302      	adds	r3, #2
 8006256:	61bb      	str	r3, [r7, #24]
 8006258:	e007      	b.n	800626a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	781a      	ldrb	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	3301      	adds	r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800626e:	b29b      	uxth	r3, r3
 8006270:	3b01      	subs	r3, #1
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1cf      	bne.n	8006222 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2200      	movs	r2, #0
 800628a:	2140      	movs	r1, #64	; 0x40
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 faef 	bl	8006870 <UART_WaitOnFlagUntilTimeout>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e006      	b.n	80062aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	e000      	b.n	80062aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80062a8:	2302      	movs	r3, #2
  }
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3720      	adds	r7, #32
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	4613      	mov	r3, r2
 80062be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d11d      	bne.n	8006308 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <HAL_UART_Receive_IT+0x26>
 80062d2:	88fb      	ldrh	r3, [r7, #6]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e016      	b.n	800630a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_UART_Receive_IT+0x38>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e00f      	b.n	800630a <HAL_UART_Receive_IT+0x58>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062f8:	88fb      	ldrh	r3, [r7, #6]
 80062fa:	461a      	mov	r2, r3
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 fb24 	bl	800694c <UART_Start_Receive_IT>
 8006304:	4603      	mov	r3, r0
 8006306:	e000      	b.n	800630a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006308:	2302      	movs	r3, #2
  }
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b0ba      	sub	sp, #232	; 0xe8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800633a:	2300      	movs	r3, #0
 800633c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006340:	2300      	movs	r3, #0
 8006342:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10f      	bne.n	800637a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800635a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <HAL_UART_IRQHandler+0x66>
 8006366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fc03 	bl	8006b7e <UART_Receive_IT>
      return;
 8006378:	e256      	b.n	8006828 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800637a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 80de 	beq.w	8006540 <HAL_UART_IRQHandler+0x22c>
 8006384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006394:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80d1 	beq.w	8006540 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800639e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <HAL_UART_IRQHandler+0xae>
 80063aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	f043 0201 	orr.w	r2, r3, #1
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00b      	beq.n	80063e6 <HAL_UART_IRQHandler+0xd2>
 80063ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	f043 0202 	orr.w	r2, r3, #2
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00b      	beq.n	800640a <HAL_UART_IRQHandler+0xf6>
 80063f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	f043 0204 	orr.w	r2, r3, #4
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d011      	beq.n	800643a <HAL_UART_IRQHandler+0x126>
 8006416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d105      	bne.n	800642e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f043 0208 	orr.w	r2, r3, #8
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 81ed 	beq.w	800681e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b00      	cmp	r3, #0
 800644e:	d008      	beq.n	8006462 <HAL_UART_IRQHandler+0x14e>
 8006450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fb8e 	bl	8006b7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646c:	2b40      	cmp	r3, #64	; 0x40
 800646e:	bf0c      	ite	eq
 8006470:	2301      	moveq	r3, #1
 8006472:	2300      	movne	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <HAL_UART_IRQHandler+0x17a>
 8006486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d04f      	beq.n	800652e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fa96 	bl	80069c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649e:	2b40      	cmp	r3, #64	; 0x40
 80064a0:	d141      	bne.n	8006526 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3314      	adds	r3, #20
 80064a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3314      	adds	r3, #20
 80064ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1d9      	bne.n	80064a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d013      	beq.n	800651e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	4a7d      	ldr	r2, [pc, #500]	; (80066f0 <HAL_UART_IRQHandler+0x3dc>)
 80064fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	4618      	mov	r0, r3
 8006504:	f7fc fc4d 	bl	8002da2 <HAL_DMA_Abort_IT>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d016      	beq.n	800653c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006518:	4610      	mov	r0, r2
 800651a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800651c:	e00e      	b.n	800653c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f990 	bl	8006844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	e00a      	b.n	800653c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f98c 	bl	8006844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652c:	e006      	b.n	800653c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f988 	bl	8006844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800653a:	e170      	b.n	800681e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653c:	bf00      	nop
    return;
 800653e:	e16e      	b.n	800681e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006544:	2b01      	cmp	r3, #1
 8006546:	f040 814a 	bne.w	80067de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 8143 	beq.w	80067de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 813c 	beq.w	80067de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006566:	2300      	movs	r3, #0
 8006568:	60bb      	str	r3, [r7, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006586:	2b40      	cmp	r3, #64	; 0x40
 8006588:	f040 80b4 	bne.w	80066f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006598:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8140 	beq.w	8006822 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065aa:	429a      	cmp	r2, r3
 80065ac:	f080 8139 	bcs.w	8006822 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065c2:	f000 8088 	beq.w	80066d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	330c      	adds	r3, #12
 80065cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	330c      	adds	r3, #12
 80065ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80065f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800660a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1d9      	bne.n	80065c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3314      	adds	r3, #20
 8006632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006636:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800663a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800663e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e1      	bne.n	8006612 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3314      	adds	r3, #20
 8006654:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800665e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3314      	adds	r3, #20
 800666e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006672:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006674:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006678:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e3      	bne.n	800664e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	330c      	adds	r3, #12
 800669a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a6:	f023 0310 	bic.w	r3, r3, #16
 80066aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80066ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e3      	bne.n	8006694 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fc faf6 	bl	8002cc2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066de:	b29b      	uxth	r3, r3
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f8b6 	bl	8006858 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066ec:	e099      	b.n	8006822 <HAL_UART_IRQHandler+0x50e>
 80066ee:	bf00      	nop
 80066f0:	08006a87 	.word	0x08006a87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 808b 	beq.w	8006826 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8086 	beq.w	8006826 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	330c      	adds	r3, #12
 8006720:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800672a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006730:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	330c      	adds	r3, #12
 800673a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800673e:	647a      	str	r2, [r7, #68]	; 0x44
 8006740:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006744:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800674c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e3      	bne.n	800671a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3314      	adds	r3, #20
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	623b      	str	r3, [r7, #32]
   return(result);
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	f023 0301 	bic.w	r3, r3, #1
 8006768:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3314      	adds	r3, #20
 8006772:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006776:	633a      	str	r2, [r7, #48]	; 0x30
 8006778:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800677c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677e:	e841 2300 	strex	r3, r2, [r1]
 8006782:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e3      	bne.n	8006752 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	330c      	adds	r3, #12
 800679e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0310 	bic.w	r3, r3, #16
 80067ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	330c      	adds	r3, #12
 80067b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80067bc:	61fa      	str	r2, [r7, #28]
 80067be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	69b9      	ldr	r1, [r7, #24]
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	617b      	str	r3, [r7, #20]
   return(result);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e3      	bne.n	8006798 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f83e 	bl	8006858 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067dc:	e023      	b.n	8006826 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d009      	beq.n	80067fe <HAL_UART_IRQHandler+0x4ea>
 80067ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f959 	bl	8006aae <UART_Transmit_IT>
    return;
 80067fc:	e014      	b.n	8006828 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00e      	beq.n	8006828 <HAL_UART_IRQHandler+0x514>
 800680a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d008      	beq.n	8006828 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f999 	bl	8006b4e <UART_EndTransmit_IT>
    return;
 800681c:	e004      	b.n	8006828 <HAL_UART_IRQHandler+0x514>
    return;
 800681e:	bf00      	nop
 8006820:	e002      	b.n	8006828 <HAL_UART_IRQHandler+0x514>
      return;
 8006822:	bf00      	nop
 8006824:	e000      	b.n	8006828 <HAL_UART_IRQHandler+0x514>
      return;
 8006826:	bf00      	nop
  }
}
 8006828:	37e8      	adds	r7, #232	; 0xe8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop

08006830 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b090      	sub	sp, #64	; 0x40
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	4613      	mov	r3, r2
 800687e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006880:	e050      	b.n	8006924 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006888:	d04c      	beq.n	8006924 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800688a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800688c:	2b00      	cmp	r3, #0
 800688e:	d007      	beq.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006890:	f7fc f8d6 	bl	8002a40 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800689c:	429a      	cmp	r2, r3
 800689e:	d241      	bcs.n	8006924 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	330c      	adds	r3, #12
 80068a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	330c      	adds	r3, #12
 80068be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068c0:	637a      	str	r2, [r7, #52]	; 0x34
 80068c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e5      	bne.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3314      	adds	r3, #20
 80068da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	613b      	str	r3, [r7, #16]
   return(result);
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f023 0301 	bic.w	r3, r3, #1
 80068ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3314      	adds	r3, #20
 80068f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068f4:	623a      	str	r2, [r7, #32]
 80068f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	69f9      	ldr	r1, [r7, #28]
 80068fa:	6a3a      	ldr	r2, [r7, #32]
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	61bb      	str	r3, [r7, #24]
   return(result);
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e5      	bne.n	80068d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e00f      	b.n	8006944 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	4013      	ands	r3, r2
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	429a      	cmp	r2, r3
 8006932:	bf0c      	ite	eq
 8006934:	2301      	moveq	r3, #1
 8006936:	2300      	movne	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	461a      	mov	r2, r3
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	429a      	cmp	r2, r3
 8006940:	d09f      	beq.n	8006882 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3740      	adds	r7, #64	; 0x40
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	4613      	mov	r3, r2
 8006958:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	88fa      	ldrh	r2, [r7, #6]
 8006964:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	88fa      	ldrh	r2, [r7, #6]
 800696a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2222      	movs	r2, #34	; 0x22
 8006976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006990:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695a      	ldr	r2, [r3, #20]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 0201 	orr.w	r2, r2, #1
 80069a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 0220 	orr.w	r2, r2, #32
 80069b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b095      	sub	sp, #84	; 0x54
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	330c      	adds	r3, #12
 80069ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	330c      	adds	r3, #12
 80069e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069e8:	643a      	str	r2, [r7, #64]	; 0x40
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e5      	bne.n	80069c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3314      	adds	r3, #20
 8006a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	f023 0301 	bic.w	r3, r3, #1
 8006a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3314      	adds	r3, #20
 8006a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e5      	bne.n	80069fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d119      	bne.n	8006a6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	330c      	adds	r3, #12
 8006a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f023 0310 	bic.w	r3, r3, #16
 8006a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	330c      	adds	r3, #12
 8006a56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a58:	61ba      	str	r2, [r7, #24]
 8006a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6979      	ldr	r1, [r7, #20]
 8006a5e:	69ba      	ldr	r2, [r7, #24]
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	613b      	str	r3, [r7, #16]
   return(result);
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e5      	bne.n	8006a38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a7a:	bf00      	nop
 8006a7c:	3754      	adds	r7, #84	; 0x54
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f7ff fecf 	bl	8006844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aa6:	bf00      	nop
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b21      	cmp	r3, #33	; 0x21
 8006ac0:	d13e      	bne.n	8006b40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aca:	d114      	bne.n	8006af6 <UART_Transmit_IT+0x48>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d110      	bne.n	8006af6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ae8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	1c9a      	adds	r2, r3, #2
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	621a      	str	r2, [r3, #32]
 8006af4:	e008      	b.n	8006b08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	1c59      	adds	r1, r3, #1
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6211      	str	r1, [r2, #32]
 8006b00:	781a      	ldrb	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	4619      	mov	r1, r3
 8006b16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10f      	bne.n	8006b3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	e000      	b.n	8006b42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b40:	2302      	movs	r3, #2
  }
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff fe5e 	bl	8006830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b08c      	sub	sp, #48	; 0x30
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b22      	cmp	r3, #34	; 0x22
 8006b90:	f040 80ab 	bne.w	8006cea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b9c:	d117      	bne.n	8006bce <UART_Receive_IT+0x50>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d113      	bne.n	8006bce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc6:	1c9a      	adds	r2, r3, #2
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	629a      	str	r2, [r3, #40]	; 0x28
 8006bcc:	e026      	b.n	8006c1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be0:	d007      	beq.n	8006bf2 <UART_Receive_IT+0x74>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10a      	bne.n	8006c00 <UART_Receive_IT+0x82>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	e008      	b.n	8006c12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d15a      	bne.n	8006ce6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0220 	bic.w	r2, r2, #32
 8006c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695a      	ldr	r2, [r3, #20]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0201 	bic.w	r2, r2, #1
 8006c5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d135      	bne.n	8006cdc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	330c      	adds	r3, #12
 8006c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	613b      	str	r3, [r7, #16]
   return(result);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f023 0310 	bic.w	r3, r3, #16
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	330c      	adds	r3, #12
 8006c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c96:	623a      	str	r2, [r7, #32]
 8006c98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	69f9      	ldr	r1, [r7, #28]
 8006c9c:	6a3a      	ldr	r2, [r7, #32]
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e5      	bne.n	8006c76 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b10      	cmp	r3, #16
 8006cb6:	d10a      	bne.n	8006cce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7ff fdbf 	bl	8006858 <HAL_UARTEx_RxEventCallback>
 8006cda:	e002      	b.n	8006ce2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7fb fd49 	bl	8002774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e002      	b.n	8006cec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e000      	b.n	8006cec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006cea:	2302      	movs	r3, #2
  }
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3730      	adds	r7, #48	; 0x30
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf8:	b09f      	sub	sp, #124	; 0x7c
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d0a:	68d9      	ldr	r1, [r3, #12]
 8006d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	ea40 0301 	orr.w	r3, r0, r1
 8006d14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d18:	689a      	ldr	r2, [r3, #8]
 8006d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	431a      	orrs	r2, r3
 8006d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d38:	f021 010c 	bic.w	r1, r1, #12
 8006d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d42:	430b      	orrs	r3, r1
 8006d44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d52:	6999      	ldr	r1, [r3, #24]
 8006d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	ea40 0301 	orr.w	r3, r0, r1
 8006d5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	4bc5      	ldr	r3, [pc, #788]	; (8007078 <UART_SetConfig+0x384>)
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d004      	beq.n	8006d72 <UART_SetConfig+0x7e>
 8006d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	4bc3      	ldr	r3, [pc, #780]	; (800707c <UART_SetConfig+0x388>)
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d103      	bne.n	8006d7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d72:	f7fd ff3d 	bl	8004bf0 <HAL_RCC_GetPCLK2Freq>
 8006d76:	6778      	str	r0, [r7, #116]	; 0x74
 8006d78:	e002      	b.n	8006d80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d7a:	f7fd ff25 	bl	8004bc8 <HAL_RCC_GetPCLK1Freq>
 8006d7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d88:	f040 80b6 	bne.w	8006ef8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d8e:	461c      	mov	r4, r3
 8006d90:	f04f 0500 	mov.w	r5, #0
 8006d94:	4622      	mov	r2, r4
 8006d96:	462b      	mov	r3, r5
 8006d98:	1891      	adds	r1, r2, r2
 8006d9a:	6439      	str	r1, [r7, #64]	; 0x40
 8006d9c:	415b      	adcs	r3, r3
 8006d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006da0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006da4:	1912      	adds	r2, r2, r4
 8006da6:	eb45 0303 	adc.w	r3, r5, r3
 8006daa:	f04f 0000 	mov.w	r0, #0
 8006dae:	f04f 0100 	mov.w	r1, #0
 8006db2:	00d9      	lsls	r1, r3, #3
 8006db4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006db8:	00d0      	lsls	r0, r2, #3
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	1911      	adds	r1, r2, r4
 8006dc0:	6639      	str	r1, [r7, #96]	; 0x60
 8006dc2:	416b      	adcs	r3, r5
 8006dc4:	667b      	str	r3, [r7, #100]	; 0x64
 8006dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	1891      	adds	r1, r2, r2
 8006dd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006dd4:	415b      	adcs	r3, r3
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ddc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006de0:	f7f9 f9f2 	bl	80001c8 <__aeabi_uldivmod>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4ba5      	ldr	r3, [pc, #660]	; (8007080 <UART_SetConfig+0x38c>)
 8006dea:	fba3 2302 	umull	r2, r3, r3, r2
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	011e      	lsls	r6, r3, #4
 8006df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006df4:	461c      	mov	r4, r3
 8006df6:	f04f 0500 	mov.w	r5, #0
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	462b      	mov	r3, r5
 8006dfe:	1891      	adds	r1, r2, r2
 8006e00:	6339      	str	r1, [r7, #48]	; 0x30
 8006e02:	415b      	adcs	r3, r3
 8006e04:	637b      	str	r3, [r7, #52]	; 0x34
 8006e06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e0a:	1912      	adds	r2, r2, r4
 8006e0c:	eb45 0303 	adc.w	r3, r5, r3
 8006e10:	f04f 0000 	mov.w	r0, #0
 8006e14:	f04f 0100 	mov.w	r1, #0
 8006e18:	00d9      	lsls	r1, r3, #3
 8006e1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e1e:	00d0      	lsls	r0, r2, #3
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	1911      	adds	r1, r2, r4
 8006e26:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e28:	416b      	adcs	r3, r5
 8006e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	461a      	mov	r2, r3
 8006e32:	f04f 0300 	mov.w	r3, #0
 8006e36:	1891      	adds	r1, r2, r2
 8006e38:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e3a:	415b      	adcs	r3, r3
 8006e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006e46:	f7f9 f9bf 	bl	80001c8 <__aeabi_uldivmod>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4b8c      	ldr	r3, [pc, #560]	; (8007080 <UART_SetConfig+0x38c>)
 8006e50:	fba3 1302 	umull	r1, r3, r3, r2
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	2164      	movs	r1, #100	; 0x64
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	3332      	adds	r3, #50	; 0x32
 8006e62:	4a87      	ldr	r2, [pc, #540]	; (8007080 <UART_SetConfig+0x38c>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	095b      	lsrs	r3, r3, #5
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e70:	441e      	add	r6, r3
 8006e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e74:	4618      	mov	r0, r3
 8006e76:	f04f 0100 	mov.w	r1, #0
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	1894      	adds	r4, r2, r2
 8006e80:	623c      	str	r4, [r7, #32]
 8006e82:	415b      	adcs	r3, r3
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
 8006e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e8a:	1812      	adds	r2, r2, r0
 8006e8c:	eb41 0303 	adc.w	r3, r1, r3
 8006e90:	f04f 0400 	mov.w	r4, #0
 8006e94:	f04f 0500 	mov.w	r5, #0
 8006e98:	00dd      	lsls	r5, r3, #3
 8006e9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e9e:	00d4      	lsls	r4, r2, #3
 8006ea0:	4622      	mov	r2, r4
 8006ea2:	462b      	mov	r3, r5
 8006ea4:	1814      	adds	r4, r2, r0
 8006ea6:	653c      	str	r4, [r7, #80]	; 0x50
 8006ea8:	414b      	adcs	r3, r1
 8006eaa:	657b      	str	r3, [r7, #84]	; 0x54
 8006eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	1891      	adds	r1, r2, r2
 8006eb8:	61b9      	str	r1, [r7, #24]
 8006eba:	415b      	adcs	r3, r3
 8006ebc:	61fb      	str	r3, [r7, #28]
 8006ebe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ec2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006ec6:	f7f9 f97f 	bl	80001c8 <__aeabi_uldivmod>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4b6c      	ldr	r3, [pc, #432]	; (8007080 <UART_SetConfig+0x38c>)
 8006ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed4:	095b      	lsrs	r3, r3, #5
 8006ed6:	2164      	movs	r1, #100	; 0x64
 8006ed8:	fb01 f303 	mul.w	r3, r1, r3
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	3332      	adds	r3, #50	; 0x32
 8006ee2:	4a67      	ldr	r2, [pc, #412]	; (8007080 <UART_SetConfig+0x38c>)
 8006ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee8:	095b      	lsrs	r3, r3, #5
 8006eea:	f003 0207 	and.w	r2, r3, #7
 8006eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4432      	add	r2, r6
 8006ef4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ef6:	e0b9      	b.n	800706c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006efa:	461c      	mov	r4, r3
 8006efc:	f04f 0500 	mov.w	r5, #0
 8006f00:	4622      	mov	r2, r4
 8006f02:	462b      	mov	r3, r5
 8006f04:	1891      	adds	r1, r2, r2
 8006f06:	6139      	str	r1, [r7, #16]
 8006f08:	415b      	adcs	r3, r3
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f10:	1912      	adds	r2, r2, r4
 8006f12:	eb45 0303 	adc.w	r3, r5, r3
 8006f16:	f04f 0000 	mov.w	r0, #0
 8006f1a:	f04f 0100 	mov.w	r1, #0
 8006f1e:	00d9      	lsls	r1, r3, #3
 8006f20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f24:	00d0      	lsls	r0, r2, #3
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	eb12 0804 	adds.w	r8, r2, r4
 8006f2e:	eb43 0905 	adc.w	r9, r3, r5
 8006f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f04f 0100 	mov.w	r1, #0
 8006f3c:	f04f 0200 	mov.w	r2, #0
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	008b      	lsls	r3, r1, #2
 8006f46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f4a:	0082      	lsls	r2, r0, #2
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	4649      	mov	r1, r9
 8006f50:	f7f9 f93a 	bl	80001c8 <__aeabi_uldivmod>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4b49      	ldr	r3, [pc, #292]	; (8007080 <UART_SetConfig+0x38c>)
 8006f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f5e:	095b      	lsrs	r3, r3, #5
 8006f60:	011e      	lsls	r6, r3, #4
 8006f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f64:	4618      	mov	r0, r3
 8006f66:	f04f 0100 	mov.w	r1, #0
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	1894      	adds	r4, r2, r2
 8006f70:	60bc      	str	r4, [r7, #8]
 8006f72:	415b      	adcs	r3, r3
 8006f74:	60fb      	str	r3, [r7, #12]
 8006f76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f7a:	1812      	adds	r2, r2, r0
 8006f7c:	eb41 0303 	adc.w	r3, r1, r3
 8006f80:	f04f 0400 	mov.w	r4, #0
 8006f84:	f04f 0500 	mov.w	r5, #0
 8006f88:	00dd      	lsls	r5, r3, #3
 8006f8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f8e:	00d4      	lsls	r4, r2, #3
 8006f90:	4622      	mov	r2, r4
 8006f92:	462b      	mov	r3, r5
 8006f94:	1814      	adds	r4, r2, r0
 8006f96:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f98:	414b      	adcs	r3, r1
 8006f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f04f 0100 	mov.w	r1, #0
 8006fa6:	f04f 0200 	mov.w	r2, #0
 8006faa:	f04f 0300 	mov.w	r3, #0
 8006fae:	008b      	lsls	r3, r1, #2
 8006fb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fb4:	0082      	lsls	r2, r0, #2
 8006fb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006fba:	f7f9 f905 	bl	80001c8 <__aeabi_uldivmod>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4b2f      	ldr	r3, [pc, #188]	; (8007080 <UART_SetConfig+0x38c>)
 8006fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	2164      	movs	r1, #100	; 0x64
 8006fcc:	fb01 f303 	mul.w	r3, r1, r3
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	011b      	lsls	r3, r3, #4
 8006fd4:	3332      	adds	r3, #50	; 0x32
 8006fd6:	4a2a      	ldr	r2, [pc, #168]	; (8007080 <UART_SetConfig+0x38c>)
 8006fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fdc:	095b      	lsrs	r3, r3, #5
 8006fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fe2:	441e      	add	r6, r3
 8006fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f04f 0100 	mov.w	r1, #0
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	1894      	adds	r4, r2, r2
 8006ff2:	603c      	str	r4, [r7, #0]
 8006ff4:	415b      	adcs	r3, r3
 8006ff6:	607b      	str	r3, [r7, #4]
 8006ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ffc:	1812      	adds	r2, r2, r0
 8006ffe:	eb41 0303 	adc.w	r3, r1, r3
 8007002:	f04f 0400 	mov.w	r4, #0
 8007006:	f04f 0500 	mov.w	r5, #0
 800700a:	00dd      	lsls	r5, r3, #3
 800700c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007010:	00d4      	lsls	r4, r2, #3
 8007012:	4622      	mov	r2, r4
 8007014:	462b      	mov	r3, r5
 8007016:	eb12 0a00 	adds.w	sl, r2, r0
 800701a:	eb43 0b01 	adc.w	fp, r3, r1
 800701e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	4618      	mov	r0, r3
 8007024:	f04f 0100 	mov.w	r1, #0
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	008b      	lsls	r3, r1, #2
 8007032:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007036:	0082      	lsls	r2, r0, #2
 8007038:	4650      	mov	r0, sl
 800703a:	4659      	mov	r1, fp
 800703c:	f7f9 f8c4 	bl	80001c8 <__aeabi_uldivmod>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	4b0e      	ldr	r3, [pc, #56]	; (8007080 <UART_SetConfig+0x38c>)
 8007046:	fba3 1302 	umull	r1, r3, r3, r2
 800704a:	095b      	lsrs	r3, r3, #5
 800704c:	2164      	movs	r1, #100	; 0x64
 800704e:	fb01 f303 	mul.w	r3, r1, r3
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	011b      	lsls	r3, r3, #4
 8007056:	3332      	adds	r3, #50	; 0x32
 8007058:	4a09      	ldr	r2, [pc, #36]	; (8007080 <UART_SetConfig+0x38c>)
 800705a:	fba2 2303 	umull	r2, r3, r2, r3
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	f003 020f 	and.w	r2, r3, #15
 8007064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4432      	add	r2, r6
 800706a:	609a      	str	r2, [r3, #8]
}
 800706c:	bf00      	nop
 800706e:	377c      	adds	r7, #124	; 0x7c
 8007070:	46bd      	mov	sp, r7
 8007072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	bf00      	nop
 8007078:	40011000 	.word	0x40011000
 800707c:	40011400 	.word	0x40011400
 8007080:	51eb851f 	.word	0x51eb851f

08007084 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	4b20      	ldr	r3, [pc, #128]	; (8007124 <FSMC_NORSRAM_Init+0xa0>)
 80070a2:	4013      	ands	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80070ae:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80070b4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80070ba:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80070c0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80070c6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80070cc:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80070d2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80070d8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80070de:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80070e4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80070ea:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80070f0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d103      	bne.n	8007108 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007106:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68f9      	ldr	r1, [r7, #12]
 8007110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	fff00080 	.word	0xfff00080

08007128 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007142:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800714a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007156:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800715e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007166:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	3b01      	subs	r3, #1
 800716e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007170:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	3b02      	subs	r3, #2
 8007178:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800717a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007180:	4313      	orrs	r3, r2
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6979      	ldr	r1, [r7, #20]
 8007190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
	...

080071a4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071bc:	d122      	bne.n	8007204 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	4b15      	ldr	r3, [pc, #84]	; (8007220 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80071da:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80071e2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80071ea:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80071f0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6979      	ldr	r1, [r7, #20]
 80071fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007202:	e005      	b.n	8007210 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800720c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	cff00000 	.word	0xcff00000

08007224 <__libc_init_array>:
 8007224:	b570      	push	{r4, r5, r6, lr}
 8007226:	4d0d      	ldr	r5, [pc, #52]	; (800725c <__libc_init_array+0x38>)
 8007228:	4c0d      	ldr	r4, [pc, #52]	; (8007260 <__libc_init_array+0x3c>)
 800722a:	1b64      	subs	r4, r4, r5
 800722c:	10a4      	asrs	r4, r4, #2
 800722e:	2600      	movs	r6, #0
 8007230:	42a6      	cmp	r6, r4
 8007232:	d109      	bne.n	8007248 <__libc_init_array+0x24>
 8007234:	4d0b      	ldr	r5, [pc, #44]	; (8007264 <__libc_init_array+0x40>)
 8007236:	4c0c      	ldr	r4, [pc, #48]	; (8007268 <__libc_init_array+0x44>)
 8007238:	f000 f820 	bl	800727c <_init>
 800723c:	1b64      	subs	r4, r4, r5
 800723e:	10a4      	asrs	r4, r4, #2
 8007240:	2600      	movs	r6, #0
 8007242:	42a6      	cmp	r6, r4
 8007244:	d105      	bne.n	8007252 <__libc_init_array+0x2e>
 8007246:	bd70      	pop	{r4, r5, r6, pc}
 8007248:	f855 3b04 	ldr.w	r3, [r5], #4
 800724c:	4798      	blx	r3
 800724e:	3601      	adds	r6, #1
 8007250:	e7ee      	b.n	8007230 <__libc_init_array+0xc>
 8007252:	f855 3b04 	ldr.w	r3, [r5], #4
 8007256:	4798      	blx	r3
 8007258:	3601      	adds	r6, #1
 800725a:	e7f2      	b.n	8007242 <__libc_init_array+0x1e>
 800725c:	0800a260 	.word	0x0800a260
 8007260:	0800a260 	.word	0x0800a260
 8007264:	0800a260 	.word	0x0800a260
 8007268:	0800a264 	.word	0x0800a264

0800726c <memset>:
 800726c:	4402      	add	r2, r0
 800726e:	4603      	mov	r3, r0
 8007270:	4293      	cmp	r3, r2
 8007272:	d100      	bne.n	8007276 <memset+0xa>
 8007274:	4770      	bx	lr
 8007276:	f803 1b01 	strb.w	r1, [r3], #1
 800727a:	e7f9      	b.n	8007270 <memset+0x4>

0800727c <_init>:
 800727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727e:	bf00      	nop
 8007280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007282:	bc08      	pop	{r3}
 8007284:	469e      	mov	lr, r3
 8007286:	4770      	bx	lr

08007288 <_fini>:
 8007288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728a:	bf00      	nop
 800728c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800728e:	bc08      	pop	{r3}
 8007290:	469e      	mov	lr, r3
 8007292:	4770      	bx	lr
